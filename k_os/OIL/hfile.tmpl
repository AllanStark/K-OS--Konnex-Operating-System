/*
   k_os (Konnex Operating-System based on the OSEK/VDX-Standard).

   (C) 2007-2011 by Christoph Schueler <github.com/Christoph2,
                                        cpu12.gems@googlemail.com>

   All Rights Reserved

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

   s. FLOSS-EXCEPTION.txt
*/
/*
**
**  !!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT !!!
**
**
**  GENERATED WITH  : '${sys.argv[0]}', Part of k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
**  VERSION:        : ${$info.version}
**  DATE            : ${time.ctime()}
**
*/
\#if !defined(__OS_CFG_H)
\#define __OS_CFG_H

\#ifdef __cplusplus
extern "C"
{
\#endif  /* __cplusplus */

/******************************************************************************
*                            OS-Configuration Part
******************************************************************************/

\#define OS_AUTOSAR
#if $app.os.ORTI_DEBUG.value==True
\#define OS_FEATURE_ORTI_DEBUG
#end if
#if $app.os.STATUS.value=='EXTENDED'
\#define OS_EXTENDED_STATUS
#else
\#define OS_STANDARD_STATUS
#end if
#if $app.os.USECALLLEVELCHECK.value==True
\#define OS_FEATURE_CALLEVEL_CHECK
#end if
/*  OSEK-OS Conformance Class    */
\#define OS_${app.os.CC.value}

/*  OSEK-OS Scheduling Policy    */
#set schedPolicy=set([t['SCHEDULE'].value for t in $app.tasks])
#if len($schedPolicy)==2
\#define OS_SCHED_POLICY_MIX
#elif 'NON' in $schedPolicy
\#define OS_SCHED_POLICY_NON
#elif 'FULL' in $schedPolicy
\#define OS_SCHED_POLICY_PRE
#end if
\#define OS_USE_O1SCHEDULER
#if $app.os.CC.value in ('ECC1','BCC1')
\#define OS_SCHED_BM_ONLY
#end if
\#define OS_DISTINCT_PRIORITIES         ((uint8)$info.numberOfDistinctPriorities)
\#define OS_MLQ_NUMBER_OF_PRIORITIES    OS_DISTINCT_PRIORITIES
#set $qs=reduce(lambda x,y: x+y[1],$info['priorityMap'].values(),0)
\#define OS_MLQ_QUEUE_SIZE              ((uint8)$qs)

#if $app.os.STARTUPHOOK.value==True
\#define OS_USE_STARTUPHOOK
#end if
#if $app.os.SHUTDOWNHOOK.value==True
\#define OS_USE_SHUTDOWNHOOK
#end if
#if $app.os.PRETASKHOOK.value==True
\#define OS_USE_PRETASKHOOK
#end if
#if $app.os.POSTTASKHOOK.value==True
\#define OS_USE_POSTTASKHOOK
#end if
#if $app.os.ERRORHOOK.value==True
\#define OS_USE_ERRORHOOK
#end if
#if $app.os.USERESSCHEDULER.value==True
\#define OS_USE_RESSCHEDULER
#end if
#if $app.os.USEGETSERVICEID.value==True
\#define OS_USE_GETSERVICEID
#end if
#if $app.os.USEPARAMETERACCESS.value==True
\#define OS_USE_PARAMETERACCESS
#end if
#*
\#define OS_USE_IDLETIMEHOOK
\#define OS_USE_STACKCHECKING
*#

#if $len($app.alarms)>0
\#define OS_USE_ALARMS
#end if
#if $len($app.events)>0
\#define OS_USE_EVENTS
#end if
#if $info.useResources
\#define OS_USE_INTERNAL_RESOURCES
\#define OS_USE_RESOURCES
#end if /* $info.useResources */
\#define OS_USE_SCHEDULE_TABLES
#if $app.os.SAVE_STARTUP_CONTEXT.value==True
\#define OS_FEATURE_SAVE_STARTUP_CONTEXT
#end if

/*** OSEK-COM ***/
\#define OS_USE_COM

\#if defined(OS_USE_COM)
    \#define COM_USE_ERROR_HOOK
    \#define COM_USE_GETSERVICEID
    \#define COM_USE_PARAMETERACCESS
    \#define COM_START_COM_EXTENSION
    \#define COM_STANDARD_STATUS
    \#define COM_EXTENDED_STATUS
    \#define LOCALMESSAGESONLY 1
\#endif /* OS_USE_COM */

/******************************************************************************
*                           APP-Configuration Part
******************************************************************************/
#set $numTasks=$len($app.tasks)
#set $numAlarms=$len($app.alarms)
#set $numCounters=$len($app.counters)

\#define OS_NUMBER_OF_TASKS         ((uint8)$($numTasks+1))
\#define OS_NUMBER_OF_ALARMS        ((uint8)$numAlarms)
\#define OS_NUMBER_OF_COUNTERS      ((uint8)$len($app.counters))
\#define OS_NUMBER_OF_EVENTS        ((uint8)$len($app.events))
#if $info.useResources
\#define OS_NUMBER_OF_RESOURCES     ((uint8)$len($app.standardResources))
\#define OS_NUMBER_OF_INT_RESOURCES ((uint8)$len($app.internalResources))
#end if
#if $len($info.autostartedTasks)>0
\#define OS_FEATURE_AUTOSTART_TASKS
#end if
#if $len($info.autostartedAlarms)>0
\#define OS_FEATURE_AUTOSTART_ALARMS
#end if

\#include "Os_Defs.h"
\#include "Os_Port.h"
/*
**
**  Scheduler.
**
*/
extern const OsMLQ_QueueConfigurationType MLQ_QueueDef[];


/*
**
**  Application-Modes.
**
*/
#for $appmode in $app.appmodes
\#define $appmode.name  ((AppModeType)$appmode.value)
#end for
#if len($app.appmodes)==1
\#define OS_FEATURE_REAL_DEFAULT_APPMODE    ((AppModeType)1)
#end if


/*
**
**  Tasks.
**
*/
\#define IDLE_TASK_STACK_SIZE       ((uint8)$app.os.IDLE_TASK_STACK_SIZE.value)
\#define ISR_STACK_SIZE             ((uint8)$app.os.ISR_STACK_SIZE.value)

#for $task in $app.tasks
\#define ${task.name.upper}_STACK_SIZE  ((uint8)$task.STACKSIZE.value)
extern uint8 ${task.name}_Stack[${task.name.upper}_STACK_SIZE];

#end for
extern uint8 ISR_Stack[ISR_STACK_SIZE];
extern uint8 IdleTask_Stack[IDLE_TASK_STACK_SIZE];

extern OsTCBType OS_TCB[OS_NUMBER_OF_TASKS];
extern const OsTaskConfigurationType OS_TaskConf[OS_NUMBER_OF_TASKS];

#for $num,$task in $enumerate($app.tasks,1)
DeclareTask(${task.name});
\#define ${task.name}   ((TaskType)${num})

#end for
#if $info.useResources
/*
**
**  Resources.
**
*/
#if $len($app.standardResources)>0
extern const OsResourceConfigurationType OS_ResourceConf[];
extern OsResourceType Os_Resources[];
#end if
#if $len($app.internalResources)>0
extern const OsResourceConfigurationType OS_IntResourceConf[];
#end if

/*
**  Resource handles.
*/
#if $len($app.standardResources)>0
#for $num,$res in $enumerate($app.standardResources,1)
\#define ${res.name}    ((uint8)$num)
#end for
#end if
#end if /* $info.useResources */
#if len($app.counters)>0

/*
**
**  Counters.
**
*/
extern volatile TickType Os_CounterValues[OS_NUMBER_OF_COUNTERS];
extern const CounterConfigurationType Os_CounterDefs[OS_NUMBER_OF_COUNTERS];
#*
The Generator shall create conversion macros to convert counter ticks
(given as an argument) to real time. The Format of the Macro is

    OS_TICKS2<Unit>_<Counter>(ticks)

whereas <Unit> is of of NS (nanoseconds), US (microseconds),
MS (milliseconds) or SEC (seconds) and <Counter> is the name
of the Counter, e.g. OS_TICKS2MS_MyCounter()
*#
#set units=('NS','US','MS','SEC')
#for $num,$counter in $enumerate($app.counters)

/* ${counter.name} */
\#define $counter.name                      ((CounterType)$num)
## todo: only for Hardware-Counters!!!
#set $conversionMacros='\n'.join(map(lambda x: "#define OS_TICKS2%s_%s(ticks)" % (x,counter.name),units))
$conversionMacros

\#define OSMAXALLOWEDVALUE_${counter.name}  ((TickType)${counter.MAXALLOWEDVALUE.value})
\#define OSTICKSPERBASE_${counter.name}     ((TickType)${counter.TICKSPERBASE.value})
\#define OSMINCYCLE_${counter.name}         ((TickType)${counter.MINCYCLE.value})
#end for
#end if

/*
**  Hardware-Counter-Drivers.
*/
#set $counterDrivers=set([c['TYPE']['DRIVER'].value for c in $app.counters if c['TYPE'].value=='HARDWARE'])
#for $driver in $counterDrivers
\#define OS_FEATURE_INSTALL_${driver}_TIMER_HANDLER
#set $counters=["(void)IncrementCounter(%s);" % c.name for c in $app.counters if c['TYPE'].value=='HARDWARE' and c['TYPE']['DRIVER'].value==$driver]
\#define OS_${driver}_TIMER_DRIVER_IMPL() \
##\#define OS_COUNTER_DRIVER_IMPL() \
    _BEGIN_BLOCK \
#for $counter in $counters
        $counter \
#end for
    _END_BLOCK
#end for


/*
**
**  Alarms.
**
*/
## todo: Parameter: 'OS_FEATURE_AUTOSTART_ALARMS'!!!
#if ($numAlarms>16) and ($numAlarms<=32)
typedef uint32 Os_AlarmStateType;
#elif ($numAlarms>8)
typedef uint16 Os_AlarmStateType;
#elif ($numAlarms>=0)
typedef uint8 Os_AlarmStateType;
#end if

#for $num,$alarm in $enumerate($app.alarms)
\#define ${alarm.name}  ((AlarmType)${num})
#end for

#if $numAlarms>0
#set $callbacks=[$x for $x in $app.alarms if $x.ACTION.value=='ALARMCALLBACK']
#if $callbacks
/*
**  Callbacks.
*/
#for $callback in $callbacks
DeclareAlarmCallback($callback.ACTION.ALARMCALLBACKNAME.value);
#end for
#end if

extern volatile OSAlarm OS_AlarmValue[OS_NUMBER_OF_ALARMS];
extern const AlarmConfigurationType OS_AlarmConf[OS_NUMBER_OF_ALARMS];
#end if


/*
**
**  Events.
**
*/
#for $event in $app.events
\#define $event.name ((EventMaskType)$event.MASK.value)
#end for


/*
**
**  ISRs.
**
*/
#set $isrList=['    ISRID_NONE']
#for $counter in $app.counters
#if $counter.TYPE.value=='HARDWARE'
$isrList.append('    ISRID_'+$counter.TYPE.DRIVER.value+'Timer')#slurp
#end if
#end for
#for $isr in $filter(lambda x: x['CATEGORY'].value==2,$app.isrs)
$isrList.append('    ISRID_'+$isr.name)#slurp
#end for
#set $isrList=',\n'.join($isrList)
typedef enum tagISRType_Generated {
$isrList
} ISRType_Generated;


\#ifdef __cplusplus
}
\#endif  /* __cplusplus */

\#endif /* __OS_CFG_H */
