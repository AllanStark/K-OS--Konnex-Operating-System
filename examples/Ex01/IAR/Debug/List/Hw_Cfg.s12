//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR HCS12 C/C++ Compiler V3.11A/W32                 17/Mar/2010  10:33:45 /
// Copyright 1997-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\projekte\csProjects\k-os\examples\Ex01\Hw_Cfg.c     /
//    Command line =  C:\projekte\csProjects\k-os\examples\Ex01\Hw_Cfg.c     /
//                    --preprocess=l C:\projekte\csProjects\k-os\examples\Ex /
//                    01\IAR\Debug\List\ -lC C:\projekte\csProjects\k-os\exa /
//                    mples\Ex01\IAR\Debug\List\ -lB                         /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\ --code_model=normal --double=32 -o                 /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Ob /
//                    j\ --require_prototypes -e -z2 --no_cse --no_unroll    /
//                    --no_inline --no_code_motion --no_tbaa                 /
//                    --no_cross_call --debug "-D_DLIB_CONFIG_FILE=C:\Progra /
//                    mme\IAR Systems\Embedded Workbench Evaluation          /
//                    4.0\HCS12\LIB\DLIB\dlhcs12nfn.h" --segment             /
//                    __data8=DATA8 --segment __data16=DATA16 --segment      /
//                    __banked=BANKED_CODE --segment __non_banked=CODE       /
//                    --segment __intvec=INTVEC --segment __difunct=DIFUNCT  /
//                    --segment __cstack=CSTACK --segment __inittab=INITTAB  /
//                    -I C:\projekte\csProjects\k-os\inc\ -I                 /
//                    C:\projekte\csProjects\common\inc\ -I                  /
//                    C:\projekte\csProjects\common\ -I                      /
//                    C:\projekte\csProjects\common\InstallISR\ -I           /
//                    C:\projekte\csProjects\k-os\examples\Ex01\ -I          /
//                    C:\projekte\csProjects\common\drivers\include\cpu12\   /
//                    -I "C:\Programme\IAR Systems\Embedded Workbench        /
//                    Evaluation 4.0\HCS12\INC\" -I "C:\Programme\IAR        /
//                    Systems\Embedded Workbench Evaluation                  /
//                    4.0\HCS12\INC\DLIB\"                                   /
//    List file    =  C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\Hw_Cfg.s12                                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Hw_Cfg

        RSEG CSTACK:DATA:REORDER:NOROOT(0)

        EXTERN ?cstart_init_zero

        PUBWEAK ?init?tab?DATA16_Z
        PUBLIC BKP
        PUBLIC CRG
        PUBLIC ECT
        PUBLIC FLS
        PUBLIC IIC0
        PUBLIC INT
        PUBLIC MEBI
        PUBLIC MMC
        PUBLIC PIM
        PUBLIC PWM
        PUBLIC S12Atd_Configuration
        PUBLIC S12Can_Configuration
        PUBLIC S12Sci_Configuration
        PUBLIC S12Spi_Configuration

// C:\projekte\csProjects\k-os\examples\Ex01\Hw_Cfg.c
//    1 /*
//    2  *   2-CB (C-Control-II kompatible Virtuelle Maschine).
//    3  *
//    4  *  (C) 2007-2009 by Christoph Schueler <chris@konnex-tools.de,
//    5  *                                       cpu12.gems@googlemail.com>
//    6  *
//    7  *   All Rights Reserved
//    8  *
//    9  *  This program is free software; you can redistribute it and/or modify
//   10  *  it under the terms of the GNU General Public License as published by
//   11  *  the Free Software Foundation; either version 2 of the License, or
//   12  *  (at your option) any later version.
//   13  *
//   14  *  This program is distributed in the hope that it will be useful,
//   15  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
//   16  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   17  *  GNU General Public License for more details.
//   18  *
//   19  *  You should have received a copy of the GNU General Public License along
//   20  *  with this program; if not, write to the Free Software Foundation, Inc.,
//   21  *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//   22  */
//   23 #include "Hw_Cfg.h"
//   24 
//   25 /*
//   26 **  ATD
//   27 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//   28 const S12Atd_ConfigType S12Atd_Configuration[2]={
S12Atd_Configuration:
        DC16 128
        DC8 16, 1, 4, 0, 1, 3
        DC16 288
        DC8 16, 1, 4, 0, 1, 3
//   29     {
//   30         BASE_ADDR_ATD0,
//   31         ((uint8)16),                /* Prescaler                    */
//   32         TRUE,                       /* TenBit                       */
//   33         S12ATD_EXT_TRIG_DISABLED,   /* ExternalTrigger              */
//   34         FALSE,                      /* EnableCompletionInterrupt    */
//   35         TRUE,                       /* ContinuousConversion         */
//   36         S12ATD_CONV_TIME_SLOW       /* ConversionTime               */
//   37     },
//   38     {
//   39         BASE_ADDR_ATD1,
//   40         ((uint8)16),                /* Prescaler                    */
//   41         TRUE,                       /* TenBit                       */
//   42         S12ATD_EXT_TRIG_DISABLED,   /* ExternalTrigger              */
//   43         FALSE,                      /* EnableCompletionInterrupt    */
//   44         TRUE,                       /* ContinuousConversion         */
//   45         S12ATD_CONV_TIME_SLOW       /* ConversionTime               */
//   46     }
//   47 };
//   48 
//   49 
//   50 /*
//   51 **  BKP
//   52 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//   53 const S12Bkp_ConfigType BKP={
BKP:
        DC16 40
//   54     BASE_ADDR_BKP
//   55 };
//   56 
//   57 
//   58 /*
//   59 **  CAN
//   60 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//   61 const S12Can_ConfigType S12Can_Configuration[5]={
S12Can_Configuration:
        DC16 320
        DC8 16, 1, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 3, 255, 255, 255, 255
        DC16 384
        DC8 16, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255
        DC16 448
        DC8 16, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255
        DC16 544
        DC8 16, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255
        DC16 640
        DC8 16, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255
//   62     {
//   63         BASE_ADDR_CAN0,
//   64         {
//   65             S12CAN_ACC_FLT_FOUR_16,
//   66             S12CAN_4_16_FILTERS(0x0100U,0x0200U,0x0000U,0x0000U),
//   67             S12CAN_4_16_FILTERS(0x0003U,0x0003U,0xffffU,0xffffU)
//   68         }
//   69     },
//   70     {
//   71         BASE_ADDR_CAN1,
//   72         {
//   73             S12CAN_ACC_FLT_FOUR_16,
//   74             S12CAN_4_16_FILTERS(0x0000U,0x0000U,0x0000U,0x0000U),
//   75             S12CAN_4_16_FILTERS(0xffffU,0xffffU,0xffffU,0xffffU)
//   76         }
//   77     },
//   78     {
//   79         BASE_ADDR_CAN2,
//   80         {
//   81             S12CAN_ACC_FLT_FOUR_16,
//   82             S12CAN_4_16_FILTERS(0x0000U,0x0000U,0x0000U,0x0000U),
//   83             S12CAN_4_16_FILTERS(0xffffU,0xffffU,0xffffU,0xffffU)
//   84         }
//   85     },
//   86     {
//   87         BASE_ADDR_CAN3,
//   88         {
//   89             S12CAN_ACC_FLT_FOUR_16,
//   90             S12CAN_4_16_FILTERS(0x0000U,0x0000U,0x0000U,0x0000U),
//   91             S12CAN_4_16_FILTERS(0xffffU,0xffffU,0xffffU,0xffffU)
//   92         }
//   93     },
//   94     {
//   95         BASE_ADDR_CAN4,
//   96         {
//   97             S12CAN_ACC_FLT_FOUR_16,
//   98             S12CAN_4_16_FILTERS(0x0000,0x0000,0x0000,0x0000),
//   99             S12CAN_4_16_FILTERS(0xffff,0xffff,0xffff,0xffff)
//  100         }
//  101     }
//  102 };
//  103 
//  104 
//  105 /*
//  106 **  CRG
//  107 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  108 const S12Crg_ConfigType CRG={
CRG:
        DC16 52
        DC8 16, 25, 0, 0, 0, 5, 14
//  109     BASE_ADDR_CRG,  /* Base-Address         */
//  110     ((uint8)16),    /* OSC-Freq.            */
//  111     ((uint8)25),    /* Max. Bus Freq.       */
//  112 #if defined(VM_USE_WATCHDOG)
//  113     TRUE,           /* Enable Watchdog?     */
//  114     CR2|CR1|CR0,    /* Watchdog Prescaler   */
//  115 #else
//  116     FALSE,          /* Enable Watchdog?     */
//  117     ((uint8)0),     /* Watchdog Prescaler   */
//  118 #endif /* VM_USE_WATCHDOG */
//  119 
//  120     FALSE,          /* Enable RTI?          */
//  121     ((uint8)5),     /* RTI Prescaler        */
//  122     ((uint8)14)     /* RTI Modulo           */
//  123 };
//  124 
//  125 
//  126 /*
//  127 **  ECT
//  128 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  129 const S12Ect_ConfigType ECT={
ECT:
        DC16 64, 1000
        DC8 0, 224, 131, 0, 0, 0, 0, 0, 82, 66, 0, 198
        DC16 1000
        DC8 0, 0, 0
//  130     BASE_ADDR_ECT,  /* Base-Address         */
//  131 
//  132     (uint16)1000,           /* cycle - (od. Period/TimeBase???) in Nano-Secs. */
//  133     ((uint8)0x00),          /* TIos     */
//  134     TEN|TSWAI|TSFRZ,        /* TScr1    */
//  135     TOI|PR0|PR1,            /* TScr2    */
//  136     ((uint8)0x00),          /* TCtl1    */
//  137     ((uint8)0x00),          /* TCtl2    */
//  138     ((uint8)0x00),          /* TCtl3    */
//  139     ((uint8)0x00),          /* TCtl4    */
//  140     ((uint8)0x00),          /* TIe Interrupt-Freigabe je nach Cfg. */
//  141     PAEN|PAOVI|PEDGE,       /* PActl    */
//  142     PBEN|PBOVI,             /* PBctl    */
//  143     ((uint8)0x00),          /* ICpar    */
//  144     MCZI|MODMC|MCEN|MCPR1,  /* MCctl    */
//  145     SYSTEM_TIMER_FREQ,      /* MCcnt    */
//  146     ((uint8)0x00),          /* DLyct    */
//  147     ((uint8)0x00),          /* ICovw    */
//  148     ((uint8)0x00),          /* ICsys    */
//  149 };
//  150 
//  151 /*
//  152 **  FLASH
//  153 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  154 const S12Fls_ConfigType FLS={
FLS:
        DC16 256
//  155     BASE_ADDR_FLS
//  156 };
//  157 
//  158 /*
//  159 **  IIC
//  160 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  161 const S12Iic_ConfigType IIC0={
IIC0:
        DC16 224
        DC8 24
//  162     BASE_ADDR_IIC0,
//  163     ((uint8)0x18),   /* 25MHz: 0x23 */
//  164     /* Fastmode
//  165        ========
//  166        8MHz    IBCR=0x00   // DIV=20 SDA_Hold=7
//  167        25MHz   IBCR=0x49   // Div=64 SDA_Hold=14
//  168     */
//  169 };
//  170 
//  171 
//  172 /*
//  173 **  INT
//  174 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  175 const S12Int_ConfigType INT={
INT:
        DC16 0
//  176     BASE_ADDR_INT
//  177 };
//  178 
//  179 
//  180 /*
//  181 **  MEBI
//  182 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  183 const S12Mebi_ConfigType MEBI={
MEBI:
        DC16 0
        DC8 144, 0, 0, 0, 0, 0, 0, 10, 3, 13, 7
//  184     BASE_ADDR_MEBI,
//  185 
//  186     PUPKE|PUPEE/*|PUPBE|PUPAE*/,    /* Pucr     */
//  187     ((uint8)0x00),              /* Rdriv    */
//  188     ((uint8)0x00),              /* IrqCr    */
//  189     ((uint8)0x00),              /* DdrA     */
//  190     ((uint8)0x00),              /* PortA    */
//  191     ((uint8)0x00),              /* DdrB     */
//  192     ((uint8)0x00),              /* PortB    */
//  193     ((uint8)0x0a),              /* DdrE     */
//  194     ((uint8)0x03),              /* PortE    */
//  195     ((uint8)0x0d),              /* DdrK     */
//  196     ((uint8)0x07),              /* PortK    */
//  197 };
//  198 
//  199 
//  200 /*
//  201 **  MMC
//  202 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  203 const S12Mmc_ConfigType MMC={
MMC:
        DC16 0
        DC8 9, 0, 1, 13
//  204     BASE_ADDR_MMC,
//  205     ((uint8)0x09),  /*  InitRM  */
//  206     ((uint8)0x00),  /*  InitRG  */
//  207     ((uint8)0x01),  /*  InitEE  */
//  208     ((uint8)0x0d),  /*  Misc    */
//  209 };
//  210 
//  211 
//  212 /*
//  213 **  PIM
//  214 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  215 const S12Pim_ConfigType PIM={
PIM:
        DC16 576
        DC8 0, 0, 0, 0, 0, 0, 224, 128, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 255, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 255, 0, 0
//  216     BASE_ADDR_PIM,
//  217     ((uint8)0x00),  /* Modrr    */
//  218 
//  219     /* PortT */
//  220     ((uint8)0x00),  /* DdrT     */
//  221     ((uint8)0x00),  /* PtT      */
//  222     ((uint8)0x00),  /* RdrT     */
//  223     ((uint8)0x00),  /* PerT     */
//  224     ((uint8)0x00),  /* PpsT     */
//  225 
//  226     /* PortS */
//  227     ((uint8)0xe0),  /* DdrS     */
//  228     ((uint8)0x80),  /* PtS      */
//  229     ((uint8)0x00),  /* RdrS     */
//  230     ((uint8)0x00),  /* PerS     */
//  231     ((uint8)0x00),  /* PpsS     */
//  232     ((uint8)0xf0),  /* WomS     */
//  233 
//  234     /* PortM */
//  235     ((uint8)0x00),  /* DdrM     */
//  236     ((uint8)0x00),  /* PtM      */
//  237     ((uint8)0x00),  /* RdrM     */
//  238     ((uint8)0x00),  /* PerM     */
//  239     ((uint8)0x00),  /* PpsM     */
//  240     ((uint8)0x00),  /* WomM     */
//  241 
//  242     /* PortP */
//  243     ((uint8)0x00),  /* DdrP     */
//  244     ((uint8)0x00),  /* PtP      */
//  245     ((uint8)0x00),  /* RdrP     */
//  246     ((uint8)0xff),  /* PerP     */
//  247     ((uint8)0x00),  /* PpsP     */
//  248     ((uint8)0x00),  /* PieP     */
//  249 
//  250     /* PortH */
//  251     ((uint8)0x00),  /* DdrH     */
//  252     ((uint8)0x00),  /* PtH      */
//  253     ((uint8)0x00),  /* RdrH     */
//  254     ((uint8)0xff),  /* PerH     */
//  255     ((uint8)0x00),  /* PpsH     */
//  256     ((uint8)0x00),  /* PieH     */
//  257 
//  258     /* PortJ */
//  259     ((uint8)0x00),  /* DdrJ     */
//  260     ((uint8)0x00),  /* PtJ      */
//  261     ((uint8)0x00),  /* RdrJ     */
//  262     ((uint8)0xff),  /* PerJ     */
//  263     ((uint8)0x00),  /* PpsJ     */
//  264     ((uint8)0x00),  /* PieJ     */
//  265 };
//  266 
//  267 
//  268 /*
//  269 **  PWM
//  270 */

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  271 const S12Pwm_ConfigType PWM={
PWM:
        DC16 160
        DC8 170, 252, 170, 170, 0, 0, 5, 5, 0
        DC16 65535, 65535, 65535, 65535, 0, 0, 0, 0
//  272     BASE_ADDR_PWM,
//  273 
//  274     ((uint8)0xaa),                      /* PwmE                             */
//  275     CON67|CON45|CON23|CON01|PSWAI|PFRZ, /* PwmCtl - 16Bit channels.         */
//  276     ((uint8)0xaa),                      /* PwmPol                           */
//  277     ((uint8)0xaa),                      /* PwmClk - use scaled clocks.      */
//  278     ((uint8)0x00),                      /* PwmPrClk                         */
//  279     ((uint8)0x00),                      /* PwmCae - left aligned channels.  */
//  280     ((uint8)0x05),                      /* PwmSclA                          */
//  281     ((uint8)0x05),                      /* PwmSclB                          */
//  282     ((uint8)0x00),                      /* PwmSdn                           */
//  283 
//  284     ((uint16)0xffffU),                  /* PwmPer01                         */
//  285     ((uint16)0xffffU),                  /* PwmPer23                         */
//  286     ((uint16)0xffffU),                  /* PwmPer45                         */
//  287     ((uint16)0xffffU),                  /* PwmPer67                         */
//  288 
//  289     ((uint16)0x0000U),                  /* PwmDty01                         */
//  290     ((uint16)0x0000U),                  /* PwmDty23                         */
//  291     ((uint16)0x0000U),                  /* PwmDty45                         */
//  292     ((uint16)0x0000U),                  /* PwmDty67                         */
//  293 };
//  294 
//  295 
//  296 /*
//  297 **  SCI
//  298 */

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//  299 static S12Sci_VariablesType ComPort[2];
ComPort:
        DS8 20

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//  300 static uint8 SCI0_RxBuffer[SCI0_RX_BUF_LEN],SCI1_RxBuffer[SCI1_RX_BUF_LEN];
SCI0_RxBuffer:
        DS8 32

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
SCI1_RxBuffer:
        DS8 32
//  301 

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  302 const S12Sci_ConfigType S12Sci_Configuration[2]={
S12Sci_Configuration:
        DC16 200
        DC32 19200
        DC8 0, 8
        DC16 SCI0_RxBuffer
        DC8 32
        DC16 ComPort, 0H, 0H, 208
        DC32 19200
        DC8 0, 8
        DC16 SCI1_RxBuffer
        DC8 32
        DC16 ComPort + 0AH, 0H, 0H
//  303     {
//  304         BASE_ADDR_SCI0,
//  305         ((uint32)19200),
//  306         SCI_PARITY_NONE,
//  307         ((uint8)8),
//  308         SCI0_RxBuffer,
//  309         SCI0_RX_BUF_LEN,
//  310         &ComPort[0],
//  311         (HW_EventNotifyFunc)NULL,
//  312         (HW_EventNotifyFunc)NULL
//  313     },
//  314     {
//  315         BASE_ADDR_SCI1,
//  316         ((uint32)19200),
//  317         SCI_PARITY_NONE,
//  318         ((uint8)8),
//  319         SCI1_RxBuffer,
//  320         SCI1_RX_BUF_LEN,
//  321         &ComPort[1],
//  322         (HW_EventNotifyFunc)NULL,
//  323         (HW_EventNotifyFunc)NULL
//  324     }
//  325 };
//  326 
//  327 
//  328 /*
//  329 **  SPI
//  330 */
//  331 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//  332 static S12Spi_VariablesType SPIVars[3];
SPIVars:
        DS8 12
//  333 

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  334 const S12Spi_ConfigType S12Spi_Configuration[3]={
S12Spi_Configuration:
        DC16 216
        DC8 83
        DC16 SPIVars
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(0)
?init?tab?DATA16_Z:
        DC16    sfe(DATA16_Z) - sfb(DATA16_Z), sfb(DATA16_Z), sfb(DATA16_Z)

        END
//  335     {
//  336         BASE_ADDR_SPI0,
//  337         (uint8)0x53,    /* Busclock / 80.   */
//  338         &SPIVars[0]
//  339     }
//  340 };
//  341 
// 
// 283 bytes in segment DATA16_C
//  96 bytes in segment DATA16_Z
//   6 bytes in segment INITTAB
// 
//   0 bytes of CODE  memory (+ 6 bytes shared)
// 283 bytes of CONST memory
//  96 bytes of DATA  memory
//
//Errors: none
//Warnings: 1
