//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR HCS12 C/C++ Compiler V3.11A/W32                 17/Mar/2010  10:33:44 /
// Copyright 1997-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\projekte\csProjects\k-os\examples\Ex01\Os_Cfg.c     /
//    Command line =  C:\projekte\csProjects\k-os\examples\Ex01\Os_Cfg.c     /
//                    --preprocess=l C:\projekte\csProjects\k-os\examples\Ex /
//                    01\IAR\Debug\List\ -lC C:\projekte\csProjects\k-os\exa /
//                    mples\Ex01\IAR\Debug\List\ -lB                         /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\ --code_model=normal --double=32 -o                 /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Ob /
//                    j\ --require_prototypes -e -z2 --no_cse --no_unroll    /
//                    --no_inline --no_code_motion --no_tbaa                 /
//                    --no_cross_call --debug "-D_DLIB_CONFIG_FILE=C:\Progra /
//                    mme\IAR Systems\Embedded Workbench Evaluation          /
//                    4.0\HCS12\LIB\DLIB\dlhcs12nfn.h" --segment             /
//                    __data8=DATA8 --segment __data16=DATA16 --segment      /
//                    __banked=BANKED_CODE --segment __non_banked=CODE       /
//                    --segment __intvec=INTVEC --segment __difunct=DIFUNCT  /
//                    --segment __cstack=CSTACK --segment __inittab=INITTAB  /
//                    -I C:\projekte\csProjects\k-os\inc\ -I                 /
//                    C:\projekte\csProjects\common\inc\ -I                  /
//                    C:\projekte\csProjects\common\ -I                      /
//                    C:\projekte\csProjects\common\InstallISR\ -I           /
//                    C:\projekte\csProjects\k-os\examples\Ex01\ -I          /
//                    C:\projekte\csProjects\common\drivers\include\cpu12\   /
//                    -I "C:\Programme\IAR Systems\Embedded Workbench        /
//                    Evaluation 4.0\HCS12\INC\" -I "C:\Programme\IAR        /
//                    Systems\Embedded Workbench Evaluation                  /
//                    4.0\HCS12\INC\DLIB\"                                   /
//    List file    =  C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\Os_Cfg.s12                                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Os_Cfg

        RSEG CSTACK:DATA:REORDER:NOROOT(0)

        EXTERN ?cstart_init_zero

        PUBWEAK ?init?tab?DATA16_Z
        PUBLIC AlarmsForSysCounter
        PUBLIC ISR_Stk
        PUBLIC IdleTask_Stk
        PUBLIC OSSystemTimerVector
        PUBLIC OS_AlarmConf
        PUBLIC OS_AlarmValue
        PUBLIC OS_IntResourceConf
        PUBLIC OS_ResourceConf
        PUBLIC OS_TCB
        PUBLIC OS_TaskConf
        PUBLIC Os_CounterValues
        PUBLIC Os_Resources
        PUBLIC Tsk1_Stk
        PUBLIC Tsk2_Stk
        PUBLIC __OS_CounterDefs

        EXTERN OsFlags
        EXTERN OsCallevel
        EXTERN OsCallevelSaved
        EXTERN OsCurrentISRID
        EXTERN AlarmCallbackAlarm1
        EXTERN FuncOsExec_IdleTask
        EXTERN FuncTask1
        EXTERN FuncTask2
        EXTERN OSSystemTimerVector_Handler
        EXTERN OS_ISR_CONTEXT
        EXTERN OS_RESTORE_CONTEXT
        EXTERN OS_SAVE_CONTEXT
        EXTERN OsExec_HigherPriorityThenCurrentReady
        EXTERN OsExec_ScheduleFromISR

// C:\projekte\csProjects\k-os\examples\Ex01\Os_Cfg.c
//    1 /*
//    2  * k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
//    3  *
//    4  * (C) 2007-2009 by Christoph Schueler <chris@konnex-tools.de>
//    5  *
//    6  * All Rights Reserved
//    7  *
//    8  * This program is free software; you can redistribute it and/or modify
//    9  * it under the terms of the GNU General Public License as published by
//   10  * the Free Software Foundation; either version 2 of the License, or
//   11  * (at your option) any later version.
//   12  *
//   13  * This program is distributed in the hope that it will be useful,
//   14  * but WITHOUT ANY WARRANTY; without even the implied warranty of
//   15  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   16  * GNU General Public License for more details.
//   17  *
//   18  * You should have received a copy of the GNU General Public License along
//   19  * with this program; if not, write to the Free Software Foundation, Inc.,
//   20  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//   21  *
//   22  */
//   23 
//   24 /*
//   25 **
//   26 **		!!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT !!!
//   27 **
//   28 */
//   29 
//   30 
//   31 #include "Os_Cfg.h"
//   32 
//   33 /*  todo: Makro für die Task-Definition (TCB) definieren. */
//   34 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   35 uint8 Tsk1_Stk[STACK_SIZE];
Tsk1_Stk:
        DS8 64

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   36 uint8 Tsk2_Stk[STACK_SIZE];
Tsk2_Stk:
        DS8 64

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   37 uint8 ISR_Stk[ISR_STACK_SIZE];	/* todo: OS_ISR_STACK_SIZE * OS_ISR_LEVELS */
ISR_Stk:
        DS8 32

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   38 uint8 IdleTask_Stk[IDLETASK_STACK_SIZE];
IdleTask_Stk:
        DS8 32
//   39 
//   40 /*
//   41 ** todo: 'OSDEFINEPRIORITY(INVERT_NIBBLE(x))' ist zu umständlich!!!
//   42 */
//   43 

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//   44 const OsTaskConfigurationType OS_TaskConf[OS_NUMBER_OF_TASKS]={
OS_TaskConf:
        DC16 FuncOsExec_IdleTask, IdleTask_Stk
        DC8 32, 0, 1, 255, 255
        DC16 FuncTask1, Tsk1_Stk
        DC8 64, 14, 3, 1, 255
        DC16 FuncTask2, Tsk2_Stk
        DC8 64, 15, 3, 1, 255
//   45 {
//   46     GetTaskName(OsExec_IdleTask),
//   47     (uint8*)IdleTask_Stk,
//   48     IDLETASK_STACK_SIZE,
//   49     ((PriorityType)0),
//   50     OS_TASK_ATTR_FULLPREEMPT,
//   51 #if defined(OS_BCC2) || defined(OS_ECC2)	
//   52     1,
//   53 #endif  /* OS_BCC2 || OS_ECC2 */
//   54     OS_AUTOSTART_ALWAYS,           /* IdleTask always started. */
//   55 #if defined(OS_USE_INTERNAL_RESOURCES)
//   56     INTERNAL_RES_NONE,
//   57 #endif
//   58 }
//   59 ,
//   60 {
//   61     GetTaskName(Task1),                             /*  Task-Entry.  - todo: GetTaskAddr() oder so!!! */
//   62     (uint8*)Tsk1_Stk,                               /*  Stack-Addr. */
//   63     STACK_SIZE,                                     /*  Stack-Size. */
//   64     OSDEFINEPRIORITY(INVERT_NIBBLE(2-1)),             /*  Priority. */
//   65     OS_TASK_ATTR_FULLPREEMPT|OS_TASK_ATTR_EXTENDED, /*  Flags.  */
//   66 #if defined(OS_BCC2) || defined(OS_ECC2)	
//   67     1,                                              /*  max. Activations. */
//   68 #endif  /* OS_BCC2 || OS_ECC2 */
//   69     (AppModeType)0x01,                              /*  Autostart */
//   70 #if defined(OS_USE_INTERNAL_RESOURCES)
//   71 INTERNAL_RES_NONE /*INTERNAL_RES_SCHEDULER - besser: INTERNAL_NONPREEMPT_SCHEDULER*/,
//   72 #endif
//   73 },
//   74 
//   75 {
//   76     GetTaskName(Task2),                             /*  Task-Entry. */
//   77     (uint8*)Tsk2_Stk,                               /*  Stack-Addr. */
//   78     STACK_SIZE,                                     /*  Stack-Size. */
//   79     OSDEFINEPRIORITY(INVERT_NIBBLE(1-1)),             /*  Priority. */
//   80     OS_TASK_ATTR_FULLPREEMPT|OS_TASK_ATTR_EXTENDED, /*  Flags.  */
//   81 #if defined(OS_BCC2) || defined(OS_ECC2)	
//   82     1,                                              /*  max. Activations. */
//   83 #endif  /* OS_BCC2 || OS_ECC2 */
//   84     (AppModeType)0x01,                              /*  Autostart */
//   85 #if defined(OS_USE_INTERNAL_RESOURCES)
//   86     INTERNAL_RES_NONE,
//   87 #endif
//   88 }
//   89 };
//   90 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   91 OsTCBType OS_TCB[OS_NUMBER_OF_TASKS];
OS_TCB:
        DS8 21
//   92 

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//   93 const OsResourceConfigurationType OS_ResourceConf[OS_NUMBER_OF_RESOURCES]={{INVERT_NIBBLE(2)}};
OS_ResourceConf:
        DC8 13

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//   94 const OsResourceConfigurationType OS_IntResourceConf[OS_NUMBER_OF_INT_RESOURCES]={{PRIO_SCHEDULER},{INVERT_NIBBLE(2)}}; /* Index #0 ==> PRIO_SCHEDULER */
OS_IntResourceConf:
        DC8 255, 13
//   95 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   96 OsResourceType Os_Resources[OS_NUMBER_OF_RESOURCES];    /* dynamic parameters of Resources*/
Os_Resources:
        DS8 2
//   97 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   98 volatile TickType Os_CounterValues[OS_NUMBER_OF_COUNTERS];
Os_CounterValues:
        DS8 2
//   99 

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  100 const AlarmType AlarmsForSysCounter[1]={Alarm1};
AlarmsForSysCounter:
        DC8 0
//  101 

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  102 const CounterConfigurationType __OS_CounterDefs[OS_NUMBER_OF_COUNTERS]=
__OS_CounterDefs:
        DC16 Os_CounterValues, 1000, 1000, 10
        DC8 1
        DC16 AlarmsForSysCounter
//  103 {
//  104     {&Os_CounterValues[0],{OSMAXALLOWEDVALUE_SystemCounter,OSTICKSPERBASE_SystemCounter,OSMINCYCLE_SystemCounter},(uint8)1,AlarmsForSysCounter}
//  105 };
//  106 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//  107 volatile OSAlarm OS_AlarmValue[OS_NUMBER_OF_ALARMS];
OS_AlarmValue:
        DS8 4
//  108 

        RSEG DATA16_C:CONST:REORDER:NOROOT(0)
//  109 const AlarmConfigurationType OS_AlarmConf[OS_NUMBER_OF_ALARMS]={
OS_AlarmConf:
        DC8 0, 2
        DC16 AlarmCallbackAlarm1
        DC8 1
        DC16 1000, 1000
//  110     {SystemCounter,ALM_CALLBACK,{(void*)GetAlarmCallbackName(Alarm1)},((AppModeType)0x01),(TickType)1000,(TickType)1000},
//  111 };
//  112 
//  113 /*
//  114 **  ISR2-Wrapper.
//  115 */

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  116 IMPLEMENT_ISR2_VECTOR(OSSystemTimerVector)
OSSystemTimerVector:
        JSR     OS_SAVE_CONTEXT
        JSR     OS_ISR_CONTEXT
        LDAB    #0x2
        ORAB    OsFlags
        STAB    OsFlags
        LDD     OsCallevel
        STD     OsCallevelSaved
        LDD     #0x2
        STD     OsCallevel
        LDAB    #0x1
        STAB    OsCurrentISRID
        JSR     OSSystemTimerVector_Handler
        CLR     OsCurrentISRID
        LDAB    #0xfd
        ANDB    OsFlags
        STAB    OsFlags
        JSR     OsExec_HigherPriorityThenCurrentReady
        JSR     OsExec_ScheduleFromISR
        LDD     OsCallevelSaved
        STD     OsCallevel
        JSR     OS_RESTORE_CONTEXT
        RTI

        RSEG INITTAB:CODE:ROOT(0)
?init?tab?DATA16_Z:
        DC16    sfe(DATA16_Z) - sfb(DATA16_Z), sfb(DATA16_Z), sfb(DATA16_Z)

        END
//  117 
// 
//  61 bytes in segment CODE
//  51 bytes in segment DATA16_C
// 221 bytes in segment DATA16_Z
//   6 bytes in segment INITTAB
// 
//  61 bytes of CODE  memory (+ 6 bytes shared)
//  51 bytes of CONST memory
// 221 bytes of DATA  memory
//
//Errors: none
//Warnings: 1
