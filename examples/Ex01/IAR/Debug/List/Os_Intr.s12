//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR HCS12 C/C++ Compiler V3.11A/W32                 17/Mar/2010  10:33:52 /
// Copyright 1997-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\projekte\csProjects\k-os\src\Os_Intr.c              /
//    Command line =  C:\projekte\csProjects\k-os\src\Os_Intr.c              /
//                    --preprocess=l C:\projekte\csProjects\k-os\examples\Ex /
//                    01\IAR\Debug\List\ -lC C:\projekte\csProjects\k-os\exa /
//                    mples\Ex01\IAR\Debug\List\ -lB                         /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\ --code_model=normal --double=32 -o                 /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Ob /
//                    j\ --require_prototypes -e -z2 --no_cse --no_unroll    /
//                    --no_inline --no_code_motion --no_tbaa                 /
//                    --no_cross_call --debug "-D_DLIB_CONFIG_FILE=C:\Progra /
//                    mme\IAR Systems\Embedded Workbench Evaluation          /
//                    4.0\HCS12\LIB\DLIB\dlhcs12nfn.h" --segment             /
//                    __data8=DATA8 --segment __data16=DATA16 --segment      /
//                    __banked=BANKED_CODE --segment __non_banked=CODE       /
//                    --segment __intvec=INTVEC --segment __difunct=DIFUNCT  /
//                    --segment __cstack=CSTACK --segment __inittab=INITTAB  /
//                    -I C:\projekte\csProjects\k-os\inc\ -I                 /
//                    C:\projekte\csProjects\common\inc\ -I                  /
//                    C:\projekte\csProjects\common\ -I                      /
//                    C:\projekte\csProjects\common\InstallISR\ -I           /
//                    C:\projekte\csProjects\k-os\examples\Ex01\ -I          /
//                    C:\projekte\csProjects\common\drivers\include\cpu12\   /
//                    -I "C:\Programme\IAR Systems\Embedded Workbench        /
//                    Evaluation 4.0\HCS12\INC\" -I "C:\Programme\IAR        /
//                    Systems\Embedded Workbench Evaluation                  /
//                    4.0\HCS12\INC\DLIB\"                                   /
//    List file    =  C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\Os_Intr.s12                                         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Os_Intr

        RSEG CSTACK:DATA:REORDER:NOROOT(0)

        EXTERN ?cstart_init_zero

        PUBWEAK ?init?tab?DATA16_Z
        PUBLIC GetISRID
        PUBLIC OsIntr_InitInterrupts
        PUBLIC ResumeAllInterrupts
        PUBLIC ResumeOSInterrupts
        PUBLIC SuspendAllInterrupts
        PUBLIC SuspendOSInterrupts

        EXTERN OsCurrentISRID

// C:\projekte\csProjects\k-os\src\Os_Intr.c
//    1 /*
//    2  * k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
//    3  *
//    4  * (C) 2007-2009 by Christoph Schueler <chris@konnex-tools.de>
//    5  *
//    6  * All Rights Reserved
//    7  *
//    8  * This program is free software; you can redistribute it and/or modify
//    9  * it under the terms of the GNU General Public License as published by
//   10  * the Free Software Foundation; either version 2 of the License, or
//   11  * (at your option) any later version.
//   12  *
//   13  * This program is distributed in the hope that it will be useful,
//   14  * but WITHOUT ANY WARRANTY; without even the implied warranty of
//   15  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   16  * GNU General Public License for more details.
//   17  *
//   18  * You should have received a copy of the GNU General Public License along
//   19  * with this program; if not, write to the Free Software Foundation, Inc.,
//   20  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//   21  *
//   22  */
//   23 
//   24 
//   25 /*
//   26 **
//   27 **  For now the *OS* and *All* Functions are synonyms.
//   28 **
//   29 */
//   30 
//   31 #include "Osek.h"
//   32 
//   33 
//   34 static void SuspendCPUInterrrupts(void),ResumeCPUInterrrupts(void);
//   35 
//   36 
//   37 /*
//   38 **  !REQ!AS!OS299!
//   39 **  ... (it is assumed the static variables of this functions are initialized).
//   40 */

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   41 static volatile uint8 InterruptDisableCounter=(uint8)0;
InterruptDisableCounter:
        DS8 1

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//   42 static boolean IStateSave;
IStateSave:
        DS8 1
//   43 
//   44 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//   45 void OsIntr_InitInterrupts(void)
OsIntr_InitInterrupts:
//   46 {
//   47     InterruptDisableCounter=(uint8)0;
        CLR     InterruptDisableCounter
//   48 }
        RTS
//   49 
//   50 

        RSEG CODE:CODE:NOROOT(0)
//   51 void ResumeAllInterrupts(void)
ResumeAllInterrupts:
//   52 {
//   53     ResumeCPUInterrrupts();
        BRA     ResumeCPUInterrrupts
//   54 }
//   55 
//   56 

        RSEG CODE:CODE:NOROOT(0)
//   57 void SuspendAllInterrupts(void)
SuspendAllInterrupts:
//   58 {
//   59     SuspendCPUInterrrupts();
        BRA     SuspendCPUInterrrupts
//   60 }
//   61 
//   62 

        RSEG CODE:CODE:NOROOT(0)
//   63 void ResumeOSInterrupts(void)
ResumeOSInterrupts:
//   64 {
//   65     ResumeCPUInterrrupts();
        BRA     ResumeCPUInterrrupts
//   66 }
//   67 
//   68 

        RSEG CODE:CODE:NOROOT(0)
//   69 void SuspendOSInterrupts(void)
SuspendOSInterrupts:
//   70 {
//   71     SuspendCPUInterrrupts();
        REQUIRE SuspendCPUInterrrupts
// Fall through to label SuspendCPUInterrrupts
//   72 }
//   73 
//   74 

        RSEG CODE:CODE:NOROOT(0)
//   75 void SuspendCPUInterrrupts(void)
SuspendCPUInterrrupts:
//   76 {
        PSHA
//   77     uint8 istate=CPU_INTERRUPTS_DISABLED();
        TFR     CCR,A
        BITA    #0x10
        BEQ     ??SuspendCPUInterrrupts_0
        LDAB    #0x1
        BRA     ??SuspendCPUInterrrupts_1
??SuspendCPUInterrrupts_0:
        LDAB    #0x0
//   78 
//   79     CPU_DISABLE_ALL_INTERRUPTS();
??SuspendCPUInterrrupts_1:
        SEI
//   80 
//   81     if (InterruptDisableCounter++==(uint8)0) {
        LDAA    InterruptDisableCounter
        STAA    0x0,SP
        LDAA    0x0,SP
        ADDA    #0x1
        STAA    InterruptDisableCounter
        TST     0x0,SP
        BNE     ??SuspendCPUInterrrupts_2
//   82         IStateSave=istate;
        STAB    IStateSave
//   83     }
//   84 }
??SuspendCPUInterrrupts_2:
        PULA
        RTS
//   85 
//   86 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//   87 void ResumeCPUInterrrupts(void) /* s. Autosar O92 !!!*/
ResumeCPUInterrrupts:
//   88 {
        PSHA
//   89     uint8 istate=CPU_INTERRUPTS_DISABLED();
        TFR     CCR,B
        BITB    #0x10
        BEQ     ??ResumeCPUInterrrupts_0
        LDAB    #0x1
        BRA     ??ResumeCPUInterrrupts_1
??ResumeCPUInterrrupts_0:
        LDAB    #0x0
??ResumeCPUInterrrupts_1:
        STAB    0x0,SP
//   90     ASSERT((istate==TRUE) && (InterruptDisableCounter!=(uint8)0));
        LDAB    0x0,SP
        DECB
        BNE     ??ResumeCPUInterrrupts_2
        TST     InterruptDisableCounter
        BNE     ??ResumeCPUInterrrupts_3
??ResumeCPUInterrrupts_2:
        bgnd
//   91 
//   92     CPU_DISABLE_ALL_INTERRUPTS();
??ResumeCPUInterrrupts_3:
        SEI
//   93 
//   94     if ((--InterruptDisableCounter==(uint8)0) && (IStateSave==FALSE)) {
        LDAB    InterruptDisableCounter
        ADDB    #0xff
        STAB    InterruptDisableCounter
        TSTB
        BNE     ??ResumeCPUInterrrupts_4
        TST     IStateSave
        BNE     ??ResumeCPUInterrrupts_4
//   95             CPU_ENABLE_ALL_INTERRUPTS();
        CLI
        NOP
//   96     }
//   97 }
??ResumeCPUInterrrupts_4:
        PULA
        RTS
//   98 
//   99 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  100 ISRType GetISRID(void)
GetISRID:
//  101 {
//  102     return OsCurrentISRID;
        LDAB    OsCurrentISRID
        RTS
//  103 }

        RSEG INITTAB:CODE:ROOT(0)
?init?tab?DATA16_Z:
        DC16    sfe(DATA16_Z) - sfb(DATA16_Z), sfb(DATA16_Z), sfb(DATA16_Z)

        END
// 
// 99 bytes in segment CODE
//  2 bytes in segment DATA16_Z
//  6 bytes in segment INITTAB
// 
// 99 bytes of CODE memory (+ 6 bytes shared)
//  2 bytes of DATA memory
//
//Errors: none
//Warnings: 1
