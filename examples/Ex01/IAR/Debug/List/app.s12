//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR HCS12 C/C++ Compiler V3.11A/W32                 17/Mar/2010  10:33:36 /
// Copyright 1997-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\projekte\csProjects\k-os\examples\Ex01\app.c        /
//    Command line =  C:\projekte\csProjects\k-os\examples\Ex01\app.c        /
//                    --preprocess=l C:\projekte\csProjects\k-os\examples\Ex /
//                    01\IAR\Debug\List\ -lC C:\projekte\csProjects\k-os\exa /
//                    mples\Ex01\IAR\Debug\List\ -lB                         /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\ --code_model=normal --double=32 -o                 /
//                    C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Ob /
//                    j\ --require_prototypes -e -z2 --no_cse --no_unroll    /
//                    --no_inline --no_code_motion --no_tbaa                 /
//                    --no_cross_call --debug "-D_DLIB_CONFIG_FILE=C:\Progra /
//                    mme\IAR Systems\Embedded Workbench Evaluation          /
//                    4.0\HCS12\LIB\DLIB\dlhcs12nfn.h" --segment             /
//                    __data8=DATA8 --segment __data16=DATA16 --segment      /
//                    __banked=BANKED_CODE --segment __non_banked=CODE       /
//                    --segment __intvec=INTVEC --segment __difunct=DIFUNCT  /
//                    --segment __cstack=CSTACK --segment __inittab=INITTAB  /
//                    -I C:\projekte\csProjects\k-os\inc\ -I                 /
//                    C:\projekte\csProjects\common\inc\ -I                  /
//                    C:\projekte\csProjects\common\ -I                      /
//                    C:\projekte\csProjects\common\InstallISR\ -I           /
//                    C:\projekte\csProjects\k-os\examples\Ex01\ -I          /
//                    C:\projekte\csProjects\common\drivers\include\cpu12\   /
//                    -I "C:\Programme\IAR Systems\Embedded Workbench        /
//                    Evaluation 4.0\HCS12\INC\" -I "C:\Programme\IAR        /
//                    Systems\Embedded Workbench Evaluation                  /
//                    4.0\HCS12\INC\DLIB\"                                   /
//    List file    =  C:\projekte\csProjects\k-os\examples\Ex01\IAR\Debug\Li /
//                    st\app.s12                                             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME app

        RSEG CSTACK:DATA:REORDER:NOROOT(0)

        EXTERN ?cstart_init_zero

        PUBWEAK ?init?tab?DATA16_Z
        PUBLIC AlarmCallbackAlarm1
        PUBLIC COMErrorHook
        PUBLIC ErrorHook
        PUBLIC FuncTask1
        PUBLIC FuncTask2
        PUBLIC PostTaskHook
        PUBLIC PreTaskHook
        PUBLIC main

        EXTERN ClearEvent
        EXTERN GetEvent
        EXTERN GetTaskID
        EXTERN GetTaskState
        EXTERN SetEvent
        EXTERN StartOS
        EXTERN WaitEvent

// C:\projekte\csProjects\k-os\examples\Ex01\app.c
//    1 /*
//    2    k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
//    3 
//    4    (C) 2007-2010 by Christoph Schueler <chris@konnex-tools.de,
//    5                                        cpu12.gems@googlemail.com>
//    6 
//    7    All Rights Reserved
//    8 
//    9    This program is free software; you can redistribute it and/or modify
//   10    it under the terms of the GNU General Public License as published by
//   11    the Free Software Foundation; version 2 of the License.
//   12 
//   13    This program is distributed in the hope that it will be useful,
//   14    but WITHOUT ANY WARRANTY; without even the implied warranty of
//   15    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   16    GNU General Public License for more details.
//   17 
//   18    You should have received a copy of the GNU General Public License
//   19    along with this program; if not, write to the Free Software
//   20    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//   21 
//   22    s. FLOSS-EXCEPTION.txt
//   23 */
//   24 
//   25 #include "Osek.h"
//   26 /* clude "com.h" */
//   27 
//   28 #include "S12_Fls.h"
//   29 #include "S12_Eep.h"
//   30 #include "S12_Iic.h"
//   31 #include "S12_Atd.h"
//   32 #include "S12_Crg.h"
//   33 
//   34 #include "Com.h"
//   35 
//   36 #include "Mem.h"
//   37 
//   38 
//   39 /* STATIC_ASSERT(FALSE,"Statische Assertion!!!"); */
//   40 
//   41 /* #pragma message("Hello") */
//   42 
//   43 /*__IAR_SYSTEMS_ICC__ */
//   44 
//   45 #if 0
//   46 void test(void);
//   47 void foo(int *pi);
//   48 
//   49 void foo(int const * const pi)
//   50 {
//   51     *pi*=4;
//   52 }
//   53 
//   54 void test(void);
//   55 void test(void)
//   56 {
//   57     int apple,p;
//   58 
//   59     p=1;
//   60     p=p++ + ++p;
//   61 
//   62     /*    _=_+++++_; */ /* check: die Sache mit der Greediness. */
//   63     p=3;
//   64 
//   65     apple=sizeof(int) * p;
//   66 }
//   67 #endif
//   68 
//   69 #if  0
//   70 void test(void);
//   71 
//   72 void test(void)
//   73 {
//   74     char *  p;
//   75 
//   76     p="hello world!";
//   77     p[0]='H';
//   78     p[6]='W';
//   79     (char*){"pello world!!!"}[0]='H';
//   80 }
//   81 #endif
//   82 
//   83 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//   84 int main(void)
main:
//   85 {
//   86 #if 0
//   87     Utl_DivremType dt;
//   88     void *FreePtr;
//   89 
//   90     FreePtr=Mem_SBrk((SizeType)0x0100);
//   91     FreePtr=Mem_SBrk((SizeType)0x0050);
//   92     (void)S12Crg_Init((uint8)8);
//   93     Utl_Divrem(100,13,&dt);
//   94 
//   95     test();
//   96 #endif
//   97 
//   98 
//   99 #if 0
//  100     Clock_Init(&CRG,8);
//  101 
//  102     res=S12Iic_PresenceCheck(&IIC0,0,0xff,NULL);
//  103 
//  104     S12Eep_Init();
//  105     res=S12Eep_SectorModify(0x0d00,0x11112222L);
//  106 #endif
//  107 
//  108 #if 0
//  109     S12Atd_Init(ATD0);
//  110     S12Atd_Init(ATD1);
//  111 #endif
//  112 
//  113 #if 0
//  114     S12Iic_Init(&IIC0);
//  115 
//  116 /*    S12Crg_ResetMCU(); */
//  117 
//  118     res=S12Iic_PresenceCheck(&IIC0,0,0xff,NULL);
//  119 
//  120     while (1) {         /* todo: Das I²C-Teil braucht Referenz-Spannung!!! */
//  121         S12Iic_Start(&IIC0);
//  122         ack=S12Iic_Write(&IIC0,0x58);
//  123         if (ack) {
//  124             S12Iic_Write(&IIC0,0x00);    /* Command-Byte. */
//  125             S12Iic_Write(&IIC0,j);       /* Output-Byte. */
//  126         }
//  127         S12Iic_Stop(&IIC0);
//  128         j++;
//  129 /*        adc=ADC_GetChannel(0); */
//  130     }
//  131 #endif
//  132 
//  133 
//  134 #if 0
//  135     S12Fls_Init();
//  136     res=S12Fls_SectorErase(0x3a,0xb000);
//  137     res=S12Fls_BurstProgram(0x3a,0xb000,fd,10);
//  138 #endif
//  139 
//  140     StartOS(OSDEFAULTAPPMODE);
        LDAB    #0x0
        JSR     StartOS
//  141 
//  142     return 0;
        LDD     #0x0
        RTS
//  143 }
//  144 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//  145 static uint32 snd_data=0UL;
snd_data:
        DS8 4
//  146 

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
//  147 static uint32 TimesCalled[2];
TimesCalled:
        DS8 8
//  148 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  149 TASK(Task1)
FuncTask1:
//  150 {
        PSHA
//  151 /*      (void)ActivateTask(Task1);  */
//  152 /*    ChainTask(Task1); */
//  153     EventMaskType evt;
//  154 
//  155 /*    ShutdownOS(E_OK); */
//  156 
//  157 #if 0
//  158     (void)StartCOM((COMApplicationModeType)0);
//  159 #endif
//  160 
//  161 #if 0
//  162     (void)GetResource((ResourceType)0);
//  163     (void)ReleaseResource((ResourceType)0);
//  164 #endif
//  165 
//  166     FOREVER {
//  167 
//  168         TimesCalled[0]++;
??FuncTask1_0:
        LDD     #0x1
        ADDD    TimesCalled + 2
        STD     TimesCalled + 2
        LDD     #0x0
        ADCB    TimesCalled + 1
        ADCA    TimesCalled
        STD     TimesCalled
//  169 
//  170         ASSERT(!CPU_INTERRUPTS_DISABLED());
        TFR     CCR,B
        BITB    #0x10
        BEQ     ??FuncTask1_1
        bgnd
//  171 
//  172         (void)WaitEvent((EventMaskType)0x08);
??FuncTask1_1:
        LDAB    #0x8
        JSR     WaitEvent
//  173         (void)GetEvent(Task1,&evt);
        LEAY    0x0,SP
        LDAB    #0x1
        JSR     GetEvent
//  174         (void)ClearEvent(evt);
        LDAB    0x0,SP
        JSR     ClearEvent
        BRA     ??FuncTask1_0
//  175 #if 0
//  176         (void)ReceiveMessage(1,&rcv_data);
//  177 #endif
//  178     }
//  179 
//  180 }
//  181 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  182 TASK(Task2)
FuncTask2:
??FuncTask2_0:
//  183 {
//  184 /*    Schedule(); */
//  185 
//  186     FOREVER {
//  187         TimesCalled[1]++;
        LDD     #0x1
        ADDD    TimesCalled + 6
        STD     TimesCalled + 6
        LDD     #0x0
        ADCB    TimesCalled + 5
        ADCA    TimesCalled + 4
        STD     TimesCalled + 4
//  188 
//  189         ASSERT(!CPU_INTERRUPTS_DISABLED());
        TFR     CCR,B
        BITB    #0x10
        BEQ     ??FuncTask2_1
        bgnd
//  190 
//  191         ASSERT((TimesCalled[1]-TimesCalled[0])<2);
??FuncTask2_1:
        LDD     TimesCalled + 6
        SUBD    TimesCalled + 2
        PSHD
        LDD     TimesCalled + 4
        SBCB    TimesCalled + 1
        SBCA    TimesCalled
        PULY
        EXG     Y,D
        SUBD    #0x2
        EXG     Y,D
        SBCB    #0x0
        SBCA    #0x0
        BCS     ??FuncTask2_2
        bgnd
//  192 #if 0
//  193         (void)SendMessage(0,&snd_data);
//  194 #endif
//  195         snd_data++;
??FuncTask2_2:
        LDD     #0x1
        ADDD    snd_data + 2
        STD     snd_data + 2
        LDD     #0x0
        ADCB    snd_data + 1
        ADCA    snd_data
        STD     snd_data
//  196         (void)SetEvent(Task1,(EventMaskType)0x08);
        LDAA    #0x8
        LDAB    #0x1
        JSR     SetEvent
        BRA     ??FuncTask2_0
//  197 /*        (void)ChainTask(Task1);   */
//  198     }
//  199 
//  200 }
//  201 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  202 ALARMCALLBACK(Alarm1)
AlarmCallbackAlarm1:
//  203 {
//  204    static unsigned long cnt=0UL;
//  205 
//  206    cnt++;
        LDD     #0x1
        ADDD    ??cnt + 2
        STD     ??cnt + 2
        LDD     #0x0
        ADCB    ??cnt + 1
        ADCA    ??cnt
        STD     ??cnt
//  207 }
        RTS

        RSEG DATA16_Z:DATA:REORDER:NOROOT(0)
        REQUIRE ?cstart_init_zero
??cnt:
        DS8 4
//  208 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  209 void ErrorHook(StatusType Error)
ErrorHook:
//  210 {
//  211     UNREFERENCED_PARAMETER(Error);
//  212 }
        RTS
//  213 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  214 void PreTaskHook(void)
PreTaskHook:
//  215 {
        PSHD
//  216     TaskType TaskID;
//  217     TaskStateType State;
//  218 
//  219     (void)GetTaskID(&TaskID);
        LEAY    0x0,SP
        JSR     GetTaskID
//  220     (void)GetTaskState(TaskID,&State);
        LEAY    0x1,SP
        LDAB    0x0,SP
        JSR     GetTaskState
//  221 }
        PULY
        RTS
//  222 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  223 void PostTaskHook(void)
PostTaskHook:
//  224 {
        PSHD
//  225     TaskType TaskID;
//  226     TaskStateType State;
//  227 
//  228     (void)GetTaskID(&TaskID);
        LEAY    0x0,SP
        JSR     GetTaskID
//  229     (void)GetTaskState(TaskID,&State);
        LEAY    0x1,SP
        LDAB    0x0,SP
        JSR     GetTaskState
//  230 }
        PULY
        RTS
//  231 

        RSEG CODE:CODE:REORDER:NOROOT(0)
//  232 void COMErrorHook(StatusType Error)
COMErrorHook:
//  233 {
//  234     UNREFERENCED_PARAMETER(Error);
//  235 }
        RTS

        RSEG INITTAB:CODE:ROOT(0)
?init?tab?DATA16_Z:
        DC16    sfe(DATA16_Z) - sfb(DATA16_Z), sfb(DATA16_Z), sfb(DATA16_Z)

        END
// 
// 200 bytes in segment CODE
//  16 bytes in segment DATA16_Z
//   6 bytes in segment INITTAB
// 
// 200 bytes of CODE memory (+ 6 bytes shared)
//  16 bytes of DATA memory
//
//Errors: none
//Warnings: 1
