

/**** FILE 'C:\projekte\csProjects\k-os\src\Com_Flt.c' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 

/**** FILE 'Com_Flt.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'Com.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'Os_Types.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'Std_Types.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'Std_Macros.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       30 */ 
/*       31 */ 
/*       32 */  #pragma MESSAGE DISABLE C4000
/*       33 */  #pragma MESSAGE DISABLE C4001
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       52 */ 
/*       53 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */  typedef void ( * VoidFunctionType ) ( void ) ;
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      190 */ 
/*      191 */ 
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 
/*      208 */ 
/*      209 */ 
/*      210 */ 
/*      211 */ 
/*      212 */ 
/*      213 */ 
/*      214 */ 
/*      215 */ 
/*      216 */ 
/*      217 */ 
/*      218 */ 
/*      219 */ 
/*      220 */ 
/*      221 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 
/*      227 */ 
/*      228 */ 
/*      229 */ 
/*      230 */ 
/*      231 */ 
/*      232 */ 
/*      233 */ 
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */ 
/*      241 */ 
/*      242 */ 
/*      243 */ 
/*      244 */ 
/*      245 */ 
/*      246 */ 
/*      247 */ 
/*      248 */ 
/*      249 */ 
/*      250 */ 
/*      251 */ 
/*      252 */ 
/*      253 */ 
/*      254 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 

/**** FILE 'Std_Types.h' */

/*       28 */ 
/*       29 */ 

/**** FILE 'Platform_Types.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       78 */ 
/*       79 */  typedef unsigned char boolean ;
/*       80 */  typedef signed char sint8 ;
/*       81 */  typedef unsigned char uint8 ;
/*       82 */  typedef signed short sint16 ;
/*       83 */  typedef unsigned short uint16 ;
/*       84 */  typedef signed long sint32 ;
/*       85 */  typedef unsigned long uint32 ;
/*       86 */ 
/*       87 */  typedef signed char sint8_least ;
/*       88 */  typedef unsigned char uint8_least ;
/*       89 */  typedef signed short sint16_least ;
/*       90 */  typedef unsigned short uint16_least ;
/*       91 */  typedef signed long sint32_least ;
/*       92 */  typedef unsigned long uint32_least ;
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */  typedef float float32 ;
/*      105 */  typedef double float64 ;
/*      106 */  typedef void * pvoid ;
/*      107 */  typedef unsigned int SizeType ;
/*      108 */  typedef int PtrDiffType ;
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 

/**** FILE 'Std_Types.h' */

/*       29 */ 
/*       30 */ 

/**** FILE 'Compiler.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'Std_Macros.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 

/**** FILE 'Compiler.h' */

/*       28 */ 
/*       29 */ 

/**** FILE 'Compiler_Cfg.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */ 
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      190 */ 
/*      191 */ 
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 
/*      208 */ 
/*      209 */ 
/*      210 */ 
/*      211 */ 
/*      212 */ 
/*      213 */ 
/*      214 */ 
/*      215 */ 
/*      216 */ 
/*      217 */ 
/*      218 */ 
/*      219 */ 
/*      220 */ 
/*      221 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 
/*      227 */ 
/*      228 */ 
/*      229 */ 
/*      230 */ 
/*      231 */ 
/*      232 */ 
/*      233 */ 
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */ 
/*      241 */ 
/*      242 */ 
/*      243 */ 
/*      244 */ 
/*      245 */ 
/*      246 */ 
/*      247 */ 
/*      248 */ 
/*      249 */ 
/*      250 */ 
/*      251 */ 
/*      252 */ 
/*      253 */ 
/*      254 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 
/*      258 */ 
/*      259 */ 
/*      260 */ 
/*      261 */ 
/*      262 */ 
/*      263 */ 
/*      264 */ 
/*      265 */ 
/*      266 */ 
/*      267 */ 
/*      268 */ 
/*      269 */ 
/*      270 */ 
/*      271 */ 
/*      272 */ 
/*      273 */ 
/*      274 */ 
/*      275 */ 
/*      276 */ 
/*      277 */ 
/*      278 */ 
/*      279 */ 
/*      280 */ 
/*      281 */ 
/*      282 */ 
/*      283 */ 
/*      284 */ 
/*      285 */ 
/*      286 */ 
/*      287 */ 
/*      288 */ 
/*      289 */ 
/*      290 */ 
/*      291 */ 
/*      292 */ 
/*      293 */ 
/*      294 */ 
/*      295 */ 
/*      296 */ 
/*      297 */ 
/*      298 */ 
/*      299 */ 
/*      300 */ 
/*      301 */ 
/*      302 */ 
/*      303 */ 
/*      304 */ 
/*      305 */ 
/*      306 */ 
/*      307 */ 
/*      308 */ 
/*      309 */ 
/*      310 */ 
/*      311 */ 
/*      312 */ 
/*      313 */ 
/*      314 */ 
/*      315 */ 
/*      316 */ 
/*      317 */ 
/*      318 */ 
/*      319 */ 
/*      320 */ 
/*      321 */ 
/*      322 */ 
/*      323 */ 
/*      324 */ 
/*      325 */ 
/*      326 */ 
/*      327 */ 
/*      328 */ 
/*      329 */ 
/*      330 */ 
/*      331 */ 
/*      332 */ 
/*      333 */ 
/*      334 */ 
/*      335 */ 
/*      336 */ 
/*      337 */ 
/*      338 */ 
/*      339 */ 
/*      340 */ 
/*      341 */ 
/*      342 */ 
/*      343 */ 
/*      344 */ 
/*      345 */ 
/*      346 */ 
/*      347 */ 
/*      348 */ 
/*      349 */ 
/*      350 */ 
/*      351 */ 
/*      352 */ 
/*      353 */ 
/*      354 */ 
/*      355 */ 
/*      356 */ 
/*      357 */ 
/*      358 */ 
/*      359 */ 
/*      360 */ 
/*      361 */ 
/*      362 */ 
/*      363 */ 
/*      364 */ 
/*      365 */ 
/*      366 */ 
/*      367 */ 
/*      368 */ 
/*      369 */ 
/*      370 */ 
/*      371 */ 
/*      372 */ 
/*      373 */ 
/*      374 */ 
/*      375 */ 
/*      376 */ 
/*      377 */ 
/*      378 */ 
/*      379 */ 
/*      380 */ 
/*      381 */ 
/*      382 */ 
/*      383 */ 
/*      384 */ 
/*      385 */ 
/*      386 */ 
/*      387 */ 
/*      388 */ 
/*      389 */ 
/*      390 */ 
/*      391 */ 
/*      392 */ 
/*      393 */ 
/*      394 */ 
/*      395 */ 
/*      396 */ 
/*      397 */ 
/*      398 */ 
/*      399 */ 
/*      400 */ 
/*      401 */ 
/*      402 */ 
/*      403 */ 
/*      404 */ 
/*      405 */ 
/*      406 */ 
/*      407 */ 
/*      408 */ 
/*      409 */ 
/*      410 */ 
/*      411 */ 
/*      412 */ 
/*      413 */ 
/*      414 */ 
/*      415 */ 
/*      416 */ 
/*      417 */ 
/*      418 */ 
/*      419 */ 
/*      420 */ 
/*      421 */ 
/*      422 */ 
/*      423 */ 
/*      424 */ 
/*      425 */ 
/*      426 */ 
/*      427 */ 
/*      428 */ 
/*      429 */ 
/*      430 */ 
/*      431 */ 
/*      432 */ 
/*      433 */ 
/*      434 */ 
/*      435 */ 
/*      436 */ 
/*      437 */ 
/*      438 */ 
/*      439 */ 
/*      440 */ 
/*      441 */ 
/*      442 */ 
/*      443 */ 
/*      444 */ 
/*      445 */ 
/*      446 */ 
/*      447 */ 
/*      448 */ 
/*      449 */ 
/*      450 */ 
/*      451 */ 
/*      452 */ 
/*      453 */ 
/*      454 */ 
/*      455 */ 
/*      456 */ 
/*      457 */ 
/*      458 */ 
/*      459 */ 
/*      460 */ 
/*      461 */ 
/*      462 */ 
/*      463 */ 
/*      464 */ 
/*      465 */ 
/*      466 */ 
/*      467 */ 
/*      468 */ 
/*      469 */ 
/*      470 */ 
/*      471 */ 
/*      472 */ 
/*      473 */ 
/*      474 */ 
/*      475 */ 
/*      476 */ 
/*      477 */ 
/*      478 */ 
/*      479 */ 
/*      480 */ 
/*      481 */ 
/*      482 */ 
/*      483 */ 
/*      484 */ 
/*      485 */ 
/*      486 */ 
/*      487 */ 
/*      488 */ 
/*      489 */ 
/*      490 */ 
/*      491 */ 
/*      492 */ 
/*      493 */ 
/*      494 */ 
/*      495 */ 
/*      496 */ 
/*      497 */ 
/*      498 */ 
/*      499 */ 
/*      500 */ 
/*      501 */ 
/*      502 */ 
/*      503 */ 
/*      504 */ 
/*      505 */ 
/*      506 */ 
/*      507 */ 
/*      508 */ 
/*      509 */ 
/*      510 */ 
/*      511 */ 
/*      512 */ 
/*      513 */ 
/*      514 */ 
/*      515 */ 
/*      516 */ 
/*      517 */ 
/*      518 */ 
/*      519 */ 
/*      520 */ 
/*      521 */ 
/*      522 */ 
/*      523 */ 
/*      524 */ 
/*      525 */ 
/*      526 */ 
/*      527 */ 
/*      528 */ 
/*      529 */ 
/*      530 */ 
/*      531 */ 
/*      532 */ 
/*      533 */ 
/*      534 */ 
/*      535 */ 
/*      536 */ 
/*      537 */ 
/*      538 */ 
/*      539 */ 
/*      540 */ 
/*      541 */ 
/*      542 */ 
/*      543 */ 
/*      544 */ 
/*      545 */ 
/*      546 */ 
/*      547 */ 
/*      548 */ 
/*      549 */ 
/*      550 */ 
/*      551 */ 
/*      552 */ 
/*      553 */ 
/*      554 */ 
/*      555 */ 
/*      556 */ 
/*      557 */ 
/*      558 */ 
/*      559 */ 
/*      560 */ 
/*      561 */ 
/*      562 */ 
/*      563 */ 
/*      564 */ 
/*      565 */ 
/*      566 */ 
/*      567 */ 
/*      568 */ 
/*      569 */ 
/*      570 */ 
/*      571 */ 
/*      572 */ 
/*      573 */ 
/*      574 */ 
/*      575 */ 
/*      576 */ 
/*      577 */ 
/*      578 */ 
/*      579 */ 
/*      580 */ 
/*      581 */ 
/*      582 */ 
/*      583 */ 
/*      584 */ 
/*      585 */ 
/*      586 */ 
/*      587 */ 
/*      588 */ 
/*      589 */ 
/*      590 */ 
/*      591 */ 
/*      592 */ 
/*      593 */ 
/*      594 */ 
/*      595 */ 
/*      596 */ 
/*      597 */ 
/*      598 */ 
/*      599 */ 
/*      600 */ 
/*      601 */ 
/*      602 */ 
/*      603 */ 
/*      604 */ 
/*      605 */ 
/*      606 */ 
/*      607 */ 
/*      608 */ 
/*      609 */ 
/*      610 */ 
/*      611 */ 
/*      612 */ 
/*      613 */ 
/*      614 */ 
/*      615 */ 
/*      616 */ 
/*      617 */ 
/*      618 */ 
/*      619 */ 
/*      620 */ 
/*      621 */ 
/*      622 */ 
/*      623 */ 
/*      624 */ 
/*      625 */ 
/*      626 */ 
/*      627 */ 
/*      628 */ 
/*      629 */ 
/*      630 */ 
/*      631 */ 
/*      632 */ 
/*      633 */ 
/*      634 */ 
/*      635 */ 
/*      636 */ 
/*      637 */ 
/*      638 */ 
/*      639 */ 
/*      640 */ 
/*      641 */ 
/*      642 */ 
/*      643 */ 
/*      644 */ 
/*      645 */ 
/*      646 */ 
/*      647 */ 
/*      648 */ 
/*      649 */ 
/*      650 */ 
/*      651 */ 
/*      652 */ 
/*      653 */ 
/*      654 */ 
/*      655 */ 
/*      656 */ 
/*      657 */ 
/*      658 */ 
/*      659 */ 
/*      660 */ 
/*      661 */ 
/*      662 */ 
/*      663 */ 
/*      664 */ 
/*      665 */ 
/*      666 */ 
/*      667 */ 
/*      668 */ 
/*      669 */ 
/*      670 */ 
/*      671 */ 
/*      672 */ 
/*      673 */ 
/*      674 */ 
/*      675 */ 
/*      676 */ 
/*      677 */ 
/*      678 */ 
/*      679 */ 
/*      680 */ 
/*      681 */ 
/*      682 */ 
/*      683 */ 
/*      684 */ 
/*      685 */ 
/*      686 */ 
/*      687 */ 
/*      688 */ 
/*      689 */ 
/*      690 */ 
/*      691 */ 
/*      692 */ 
/*      693 */ 

/**** FILE 'Compiler.h' */

/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       55 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 

/**** FILE 'Std_Types.h' */

/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */  typedef uint8 StatusType ;
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */  typedef uint8 Std_ReturnType ;
/*       51 */ 
/*       52 */  typedef struct tagStd_VersionInfoType {
/*       53 */  uint16 vendorID ;
/*       54 */  uint16 moduleID ;
/*       55 */  uint8 instanceID ;
/*       56 */  uint8 sw_major_version ;
/*       57 */  uint8 sw_minor_version ;
/*       58 */  uint8 sw_patch_version ;
/*       59 */  } Std_VersionInfoType ;
/*       60 */ 
/*       61 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 

/**** FILE 'Os_Types.h' */

/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */  typedef uint8 AppModeType ;
/*       95 */ 
/*       96 */  typedef uint8 PriorityType ;
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */  typedef uint8 TaskType ;
/*      105 */  typedef TaskType * TaskRefType ;
/*      106 */  typedef enum tagTaskStateType {
/*      107 */  SUSPENDED ,
/*      108 */  READY ,
/*      109 */  RUNNING ,
/*      110 */  WAITING
/*      111 */  } TaskStateType ;
/*      112 */ 
/*      113 */  typedef TaskStateType * TaskStateRefType ;
/*      114 */  typedef void ( * TaskFunctionType ) ( void ) ;
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */  typedef uint8 ResourceType ;
/*      120 */  typedef ResourceType * ResourceRefType ;
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */  typedef uint8 EventType ;
/*      125 */  typedef uint8 EventMaskType ;
/*      126 */  typedef EventMaskType * EventMaskRefType ;
/*      127 */ 
/*      128 */  typedef uint8 MessageType ;
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */  typedef uint8 CounterType ;
/*      134 */  typedef CounterType * CounterRefType ;
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */  typedef uint16 TickType ;
/*      140 */ 
/*      141 */  typedef TickType * TickRefType ;
/*      142 */ 
/*      143 */  typedef struct tagAlarmBaseType {
/*      144 */  TickType maxallowedvalue ;
/*      145 */  TickType ticksperbase ;
/*      146 */  TickType mincycle ;
/*      147 */ 
/*      148 */  } AlarmBaseType , * AlarmBaseRefType , CtrInfoType , * CtrInfoRefType ;
/*      149 */ 
/*      150 */  typedef uint8 AlarmType ;
/*      151 */  typedef void ( * AlarmCallbackType ) ( void ) ;
/*      152 */ 
/*      153 */  typedef enum tagAlarmState {
/*      154 */  ALM_STOPPED ,
/*      155 */  ALM_RUNNING
/*      156 */  } AlarmState ;
/*      157 */ 
/*      158 */  typedef struct tagAlarmSetEventType {
/*      159 */  TaskType TaskID ;
/*      160 */  EventMaskType Mask ;
/*      161 */  } AlarmSetEventType ;
/*      162 */ 
/*      163 */  typedef enum tagAlarmActionTypeType {
/*      164 */  ALM_SETEVENT ,
/*      165 */  ALM_ACTIVATETASK ,
/*      166 */  ALM_CALLBACK ,
/*      167 */  ALM_COUNTER
/*      168 */  } AlarmActionTypeType ;
/*      169 */ 
/*      170 */  typedef union tagAlarmActionType {
/*      171 */  void * Dummy ;
/*      172 */  AlarmSetEventType * Event ;
/*      173 */  TaskType TaskID ;
/*      174 */  AlarmCallbackType AlarmCallback ;
/*      175 */  CounterType CounterID ;
/*      176 */  } AlarmActionType ;
/*      177 */ 
/*      178 */  typedef struct tagOSAlarm {
/*      179 */  TickType ExpireCounter ;
/*      180 */  TickType CycleCounter ;
/*      181 */  AlarmState State ;
/*      182 */  } OSAlarm ;
/*      183 */ 
/*      184 */ 
/*      185 */  typedef struct tagAlarmConfigurationType {
/*      186 */  CounterType AttachedCounter ;
/*      187 */  AlarmActionTypeType ActionType ;
/*      188 */  AlarmActionType Action ;
/*      189 */  AppModeType Autostart ;
/*      190 */  TickType AlarmTime , CycleTime ;
/*      191 */  } AlarmConfigurationType ;
/*      192 */ 
/*      193 */  typedef enum tagCounterDriverType {
/*      194 */  COUNTER_DRIVER_HARDWARE ,
/*      195 */  COUNTER_DRIVER_SOFTWARE_BY_ISR ,
/*      196 */  COUNTER_DRIVER_SOFTWARE_BY_USER
/*      197 */  } CounterDriverType ;
/*      198 */ 
/*      199 */  typedef struct tagCounterConfigurationType {
/*      200 */ 
/*      201 */  volatile TickType * Value ;
/*      202 */  CtrInfoType CounterParams ;
/*      203 */  uint8 NumAlarms ;
/*      204 */  const AlarmType * AlarmsForCounter ;
/*      205 */  } CounterConfigurationType ;
/*      206 */ 
/*      207 */  typedef struct tagOsTCBType {
/*      208 */  uint8 * Stackpointer ;
/*      209 */  TaskStateType State ;
/*      210 */ 
/*      213 */ 
/*      216 */ 
/*      217 */ 
/*      220 */ 
/*      223 */  } OsTCBType ;
/*      224 */ 
/*      225 */ 
/*      226 */  typedef struct tagOsTaskConfigurationType {
/*      227 */  TaskFunctionType TaskFunction ;
/*      228 */  uint8 * StackStart ;
/*      229 */  uint8 StackSize ;
/*      230 */  PriorityType Priority ;
/*      231 */  uint8 Flags ;
/*      232 */ 
/*      235 */  AppModeType Autostart ;
/*      236 */ 
/*      239 */  } OsTaskConfigurationType ;
/*      240 */ 
/*      241 */ 
/*      242 */  typedef struct tagOsResourceConfigurationType {
/*      243 */  PriorityType CeilingPriority ;
/*      244 */  } OsResourceConfigurationType ;
/*      245 */ 
/*      246 */  typedef struct tagOsResourceType {
/*      247 */ 
/*      250 */  PriorityType PriorPriorityOfTask ;
/*      251 */  } OsResourceType ;
/*      252 */ 
/*      253 */ 
/*      254 */  typedef enum tagOsCallevelType {
/*      255 */  OS_CL_INVALID = ( ( uint16 ) 0x0000 ) ,
/*      256 */  OS_CL_TASK = ( ( uint16 ) 0x0001 ) ,
/*      257 */  OS_CL_ISR2 = ( ( uint16 ) 0x0002 ) ,
/*      258 */  OS_CL_ERROR_HOOK = ( ( uint16 ) 0x0004 ) ,
/*      259 */  OS_CL_PRE_TASK_HOOK = ( ( uint16 ) 0x0008 ) ,
/*      260 */  OS_CL_POST_TASK_HOOK = ( ( uint16 ) 0x0010 ) ,
/*      261 */  OS_CL_STARTUP_HOOK = ( ( uint16 ) 0x0020 ) ,
/*      262 */  OS_CL_SHUTDOWN_HOOK = ( ( uint16 ) 0x0040 ) ,
/*      263 */  OS_CL_ALARM_CALLBACK = ( ( uint16 ) 0x0080 ) ,
/*      264 */  OS_CL_PROTECTION_HOOK = ( ( uint16 ) 0x0100 ) ,
/*      265 */  OS_CL_ANY = OS_CL_TASK | OS_CL_ISR2 | OS_CL_ERROR_HOOK | OS_CL_PRE_TASK_HOOK | OS_CL_POST_TASK_HOOK | OS_CL_STARTUP_HOOK | OS_CL_SHUTDOWN_HOOK | OS_CL_ALARM_CALLBACK | OS_CL_PROTECTION_HOOK
/*      266 */ 
/*      267 */ 
/*      268 */  } OsCallevelType ;
/*      269 */ 
/*      270 */ 
/*      271 */ 
/*      272 */ 
/*      273 */ 
/*      274 */  typedef uint8 ApplicationType ;
/*      275 */ 
/*      276 */  typedef uint8 TrustedFunctionIndexType ;
/*      277 */ 
/*      278 */  typedef void * TrustedFunctionParameterRefType ;
/*      279 */ 
/*      280 */  typedef uint8 AccessType ;
/*      281 */ 
/*      282 */  typedef enum tagObjectAccessType {
/*      283 */  ACCESS ,
/*      284 */  NO_ACCESS
/*      285 */  } ObjectAccessType ;
/*      286 */ 
/*      287 */  typedef enum tagObjectTypeType {
/*      288 */  OBJECT_TASK , OBJECT_ISR , OBJECT_ALARM , OBJECT_RESOURCE ,
/*      289 */  OBJECT_COUNTER , OBJECT_SCHEDULETABLE
/*      290 */  } ObjectTypeType ;
/*      291 */ 
/*      292 */  typedef void * MemoryStartAddressType ;
/*      293 */ 
/*      294 */  typedef uint16 MemorySizeType ;
/*      295 */ 
/*      296 */  typedef uint8 ISRType ;
/*      297 */ 
/*      298 */  typedef uint8 ScheduleTableType ;
/*      299 */ 
/*      300 */  typedef enum tagScheduleTableStatusType {
/*      301 */ 
/*      302 */  SCHEDULETABLE_STOPPED , SCHEDULETABLE_NEXT , SCHEDULETABLE_WAITING ,
/*      303 */  SCHEDULETABLE_RUNNING , SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS
/*      304 */  } ScheduleTableStatusType , * ScheduleTableStatusRefType ;
/*      305 */ 
/*      306 */  typedef enum tagProtectionReturnType {
/*      307 */  PRO_IGNORE , PRO_TERMINATETASKISR , PRO_TERMINATEAPPL , PRO_TERMINATEAPPL_RESTART , PRO_SHUTDOWN
/*      308 */  } ProtectionReturnType ;
/*      309 */ 
/*      310 */  typedef enum tagRestartType {
/*      311 */  RESTART , NO_RESTART
/*      312 */  } RestartType ;
/*      313 */ 
/*      314 */  typedef uint16 PhysicalTimeType ;
/*      315 */ 
/*      316 */ 
/*      317 */ 
/*      318 */ 
/*      319 */ 

/**** FILE 'Com.h' */

/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */  typedef enum tagCOMBool { COM_FALSE , COM_TRUE } COMBool ;
/*       40 */ 
/*       41 */  typedef uint16 MessageIdentifier ;
/*       42 */  typedef void * ApplicationDataRef ;
/*       43 */  typedef uint8 COMLengthType ;
/*       44 */  typedef COMLengthType * LengthRef ;
/*       45 */  typedef COMBool FlagValue ;
/*       46 */  typedef uint8 COMApplicationModeType ;
/*       47 */  typedef enum tagCOMShutdownModeType { COM_SHUTDOWN_IMMEDIATE } COMShutdownModeType ;
/*       48 */  typedef COMBool CalloutReturnType ;
/*       49 */ 
/*       50 */ 
/*       51 */  typedef uint8 COMFlagType ;
/*       52 */ 
/*       53 */  typedef void COMServiceIdType ;
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */  typedef void ( * COMCallbackType ) ( void ) ;
/*       58 */  typedef void ( * COMCalloutType ) ( void ) ;
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */  StatusType StartCOM ( COMApplicationModeType Mode ) ;
/*       64 */  StatusType StopCOM ( COMShutdownModeType Mode ) ;
/*       65 */  COMApplicationModeType GetCOMApplicationMode ( void ) ;
/*       66 */  StatusType InitMessage ( MessageIdentifier Message , ApplicationDataRef DataRef ) ;
/*       67 */  StatusType StartPeriodic ( void ) ;
/*       68 */  StatusType StopPeriodic ( void ) ;
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */  StatusType SendMessage ( MessageIdentifier Message , ApplicationDataRef DataRef ) ;
/*       74 */  StatusType SendDynamicMessage ( MessageIdentifier Message , ApplicationDataRef DataRef , LengthRef LengthRef ) ;
/*       75 */  StatusType SendZeroMessage ( MessageIdentifier Message ) ;
/*       76 */  StatusType GetMessageStatus ( MessageIdentifier Message ) ;
/*       77 */  StatusType ReceiveMessage ( MessageIdentifier Message , ApplicationDataRef DataRef ) ;
/*       78 */  StatusType ReceiveDynamicMessage ( MessageIdentifier Message , ApplicationDataRef DataRef , LengthRef LengthRef ) ;
/*       79 */  COMServiceIdType COMErrorGetServiceId ( void ) ;
/*       80 */ 
/*       81 */ 
/*       82 */  StatusType StartCOMExtension ( void ) ;
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */  typedef enum tagComFilterAlgorithm {
/*      104 */  COM_FILTER_ALWAYS ,
/*      105 */  COM_FILTER_NEVER ,
/*      106 */  COM_FILTER_MASKEDNEWEQUALSX ,
/*      107 */  COM_FILTER_MASKEDNEWDIFFERSX ,
/*      108 */  COM_FILTER_NEWISEQUAL ,
/*      109 */  COM_FILTER_NEWISDIFFERENT ,
/*      110 */  COM_FILTER_MASKEDNEWEQUALSMASKEDOLD ,
/*      111 */  COM_FILTER_MASKEDNEWDIFFERSMASKEDOLD ,
/*      112 */  COM_FILTER_NEWISWITHIN ,
/*      113 */  COM_FILTER_NEWISOUTSIDE ,
/*      114 */  COM_FILTER_NEWISGREATER ,
/*      115 */  COM_FILTER_NEWISLESSOREQUAL ,
/*      116 */  COM_FILTER_NEWISLESS ,
/*      117 */  COM_FILTER_NEWISGREATEROREQUAL ,
/*      118 */  COM_FILTER_ONEEVERYN
/*      119 */  } ComFilterAlgorithm ;
/*      120 */ 
/*      121 */  typedef struct tagMessageSetEventType {
/*      122 */  TaskType TaskID ;
/*      123 */  EventMaskType Mask ;
/*      124 */  } MessageSetEventType ;
/*      125 */ 
/*      126 */ 
/*      127 */  typedef enum tagComMessageNotificationType {
/*      128 */  COM_NOTIFY_NONE ,
/*      129 */  COM_ACTIVATETASK ,
/*      130 */  COM_SETEVENT ,
/*      131 */  COM_COMCALLBACK ,
/*      132 */  COM_FLAG
/*      133 */  } ComMessageNotificationType ;
/*      134 */ 
/*      135 */  typedef struct tagComReceiverType {
/*      136 */  MessageIdentifier Message ;
/*      137 */  } ComReceiverType ;
/*      138 */ 
/*      139 */  typedef enum tagComMessagePropertyType {
/*      140 */ 
/*      141 */  SEND_STATIC_INTERNAL ,
/*      142 */  RECEIVE_UNQUEUED_INTERNAL ,
/*      143 */  RECEIVE_QUEUED_INTERNAL ,
/*      144 */  SEND_ZERO_INTERNAL ,
/*      145 */  RECEIVE_ZERO_INTERNAL ,
/*      146 */ 
/*      147 */  SEND_STATIC_EXTERNAL ,
/*      148 */  SEND_DYNAMIC_EXTERNAL ,
/*      149 */  SEND_ZERO_EXTERNAL ,
/*      150 */  RECEIVE_ZERO_EXTERNAL ,
/*      151 */  RECEIVE_UNQUEUED_EXTERNAL ,
/*      152 */  RECEIVE_QUEUED_EXTERNAL ,
/*      153 */  RECEIVE_DYNAMIC_EXTERNAL
/*      154 */  } ComMessagePropertyType ;
/*      155 */ 
/*      156 */  typedef union tagMessageActionType {
/*      157 */  void * Dummy ;
/*      158 */  MessageSetEventType * Event ;
/*      159 */  TaskType TaskID ;
/*      160 */  COMCallbackType Callback ;
/*      161 */  COMFlagType Flag ;
/*      162 */  } MessageActionType ;
/*      163 */ 
/*      164 */  typedef struct tagComMessageObjectType {
/*      165 */  ComMessagePropertyType Property ;
/*      166 */  ComMessageNotificationType Notification ;
/*      167 */ 
/*      168 */  MessageActionType Action ;
/*      169 */  uint8 Size ;
/*      170 */ 
/*      173 */  const ApplicationDataRef * Data ;
/*      174 */  uint8 NumReceivers ;
/*      175 */  const ComReceiverType * Receiver ;
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */  } ComMessageObjectType ;
/*      180 */ 
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */  typedef enum tagCom_StatusType {
/*      187 */  COM_UNINIT ,
/*      188 */  COM_INIT
/*      189 */  } Com_StatusType ;
/*      190 */ 
/*      191 */  typedef uint8 Com_SignalIdType ;
/*      192 */  typedef uint8 Com_SignalGroupIdType ;
/*      193 */  typedef void * Com_ApplicationDataRefType ;
/*      194 */  typedef uint8 Com_PduGroupIdType ;
/*      195 */ 
/*      196 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 

/**** FILE 'Com_Flt.h' */

/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 

/**** FILE 'C:\projekte\csProjects\k-os\src\Com_Flt.c' */

/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */  typedef struct tagMsg_Vars {
/*       45 */  uint32 new_value ;
/*       46 */  uint32 old_value ;
/*       47 */  uint16 occurrence ;
/*       48 */  } Msg_Vars ;
/*       49 */ 
/*       50 */  typedef struct tagMsg_Consts {
/*       51 */  uint32 mask ;
/*       52 */  uint32 x ;
/*       53 */  uint32 min ;
/*       54 */  uint32 max ;
/*       55 */  uint16 period ;
/*       56 */  uint16 offset ;
/*       57 */  } Msg_Consts ;
/*       58 */ 
/*       59 */  boolean ComFlt_Always ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       60 */  boolean ComFlt_Never ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       61 */  boolean ComFlt_MaskedNewEqualsX ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       62 */  boolean ComFlt_MaskedNewDiffersX ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       63 */  boolean ComFlt_NewIsEqual ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       64 */  boolean ComFlt_NewIsDifferent ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       65 */  boolean ComFlt_MaskedNewEqualsMaskedOld ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       66 */  boolean ComFlt_MaskedNewDiffersMaskedOld ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       67 */  boolean ComFlt_NewIsWithin ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       68 */  boolean ComFlt_NewIsOutside ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       69 */  boolean ComFlt_NewIsGreatear ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       70 */  boolean ComFlt_NewIsLessOrEqual ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       71 */  boolean ComFlt_NewIsLess ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       72 */  boolean ComFlt_NewIsGreaterOrEqual ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       73 */  boolean ComFlt_OneEveryN ( const Msg_Vars * vars , const Msg_Consts * consts ) ;
/*       74 */ 
/*       75 */ 
/*       76 */  boolean ComFlt_Always ( const Msg_Vars * vars , const Msg_Consts * consts )
/*       77 */  {
/*       78 */  ( ( vars ) = ( vars ) ) ;
/*       79 */  ( ( consts ) = ( consts ) ) ;
/*       80 */ 
/*       81 */  return ( ( boolean ) 1 ) ;
/*       82 */  }
/*       83 */ 
/*       84 */ 
/*       85 */  boolean ComFlt_Never ( const Msg_Vars * vars , const Msg_Consts * consts )
/*       86 */  {
/*       87 */  ( ( vars ) = ( vars ) ) ;
/*       88 */  ( ( consts ) = ( consts ) ) ;
/*       89 */ 
/*       90 */  return ( ( boolean ) 0 ) ;
/*       91 */  }
/*       92 */ 
/*       93 */  boolean ComFlt_MaskedNewEqualsX ( const Msg_Vars * vars , const Msg_Consts * consts )
/*       94 */  {
/*       95 */  return ( ( vars -> new_value & consts -> mask ) == consts -> x ) ;
/*       96 */  }
/*       97 */ 
/*       98 */  boolean ComFlt_MaskedNewDiffersX ( const Msg_Vars * vars , const Msg_Consts * consts )
/*       99 */  {
/*      100 */  return ( ( vars -> new_value & consts -> mask ) != consts -> x ) ;
/*      101 */  }
/*      102 */ 
/*      103 */  boolean ComFlt_NewIsEqual ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      104 */  {
/*      105 */  return ( vars -> new_value == vars -> old_value ) ;
/*      106 */  }
/*      107 */ 
/*      108 */  boolean ComFlt_NewIsDifferent ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      109 */  {
/*      110 */  return ( vars -> new_value != vars -> old_value ) ;
/*      111 */  }
/*      112 */ 
/*      113 */  boolean ComFlt_MaskedNewEqualsMaskedOld ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      114 */  {
/*      115 */  return ( ( vars -> new_value & consts -> mask ) == ( vars -> old_value & consts -> mask ) ) ;
/*      116 */  }
/*      117 */ 
/*      118 */  boolean ComFlt_MaskedNewDiffersMaskedOld ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      119 */  {
/*      120 */  return ( ( vars -> new_value & consts -> mask ) != ( vars -> old_value & consts -> mask ) ) ;
/*      121 */  }
/*      122 */ 
/*      123 */  boolean ComFlt_NewIsWithin ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      124 */  {
/*      125 */  return ( ( vars -> new_value >= consts -> min ) && ( vars -> new_value <= consts -> max ) ) ;
/*      126 */  }
/*      127 */ 
/*      128 */  boolean ComFlt_NewIsOutside ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      129 */  {
/*      130 */  return ( ( consts -> min > vars -> new_value ) || ( vars -> new_value > consts -> max ) ) ;
/*      131 */  }
/*      132 */ 
/*      133 */  boolean ComFlt_NewIsGreatear ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      134 */  {
/*      135 */  return ( vars -> new_value > vars -> old_value ) ;
/*      136 */  }
/*      137 */ 
/*      138 */  boolean ComFlt_NewIsLessOrEqual ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      139 */  {
/*      140 */  return ( vars -> new_value <= vars -> old_value ) ;
/*      141 */  }
/*      142 */ 
/*      143 */  boolean ComFlt_NewIsLess ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      144 */  {
/*      145 */  return ( vars -> new_value <= vars -> old_value ) ;
/*      146 */  }
/*      147 */ 
/*      148 */  boolean ComFlt_NewIsGreaterOrEqual ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      149 */  {
/*      150 */  return ( vars -> new_value >= vars -> old_value ) ;
/*      151 */  }
/*      152 */ 
/*      153 */  boolean ComFlt_OneEveryN ( const Msg_Vars * vars , const Msg_Consts * consts )
/*      154 */  {
/*      155 */  return ( ( vars -> occurrence % consts -> period ) == consts -> offset ) ;
/*      156 */  }
/*      157 */ 
/*      158 */ 
/*      159 */ 