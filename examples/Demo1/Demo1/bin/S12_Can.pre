

/**** FILE 'C:\projekte\csProjects\trunk\drivers\src\cpu12\S12_Can.c' */

/*        1 */ 
/*        2 */ 
/*        3 */ 

/**** FILE 'S12_Can.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'Std_Types.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'Std_Macros.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       30 */ 
/*       31 */ 
/*       32 */  #pragma MESSAGE DISABLE C4000
/*       33 */  #pragma MESSAGE DISABLE C4001
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       52 */ 
/*       53 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */  typedef void ( * VoidFunctionType ) ( void ) ;
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      190 */ 
/*      191 */ 
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 
/*      208 */ 
/*      209 */ 
/*      210 */ 
/*      211 */ 
/*      212 */ 
/*      213 */ 
/*      214 */ 
/*      215 */ 
/*      216 */ 
/*      217 */ 
/*      218 */ 
/*      219 */ 
/*      220 */ 
/*      221 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 
/*      227 */ 
/*      228 */ 
/*      229 */ 
/*      230 */ 
/*      231 */ 
/*      232 */ 
/*      233 */ 
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */ 
/*      241 */ 
/*      242 */ 
/*      243 */ 
/*      244 */ 
/*      245 */ 
/*      246 */ 
/*      247 */ 
/*      248 */ 
/*      249 */ 
/*      250 */ 
/*      251 */ 
/*      252 */ 
/*      253 */ 
/*      254 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 

/**** FILE 'Std_Types.h' */

/*       28 */ 
/*       29 */ 

/**** FILE 'Platform_Types.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       78 */ 
/*       79 */  typedef unsigned char boolean ;
/*       80 */  typedef signed char sint8 ;
/*       81 */  typedef unsigned char uint8 ;
/*       82 */  typedef signed short sint16 ;
/*       83 */  typedef unsigned short uint16 ;
/*       84 */  typedef signed long sint32 ;
/*       85 */  typedef unsigned long uint32 ;
/*       86 */ 
/*       87 */  typedef signed char sint8_least ;
/*       88 */  typedef unsigned char uint8_least ;
/*       89 */  typedef signed short sint16_least ;
/*       90 */  typedef unsigned short uint16_least ;
/*       91 */  typedef signed long sint32_least ;
/*       92 */  typedef unsigned long uint32_least ;
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */  typedef float float32 ;
/*      105 */  typedef double float64 ;
/*      106 */  typedef void * pvoid ;
/*      107 */  typedef unsigned int SizeType ;
/*      108 */  typedef int PtrDiffType ;
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 

/**** FILE 'Std_Types.h' */

/*       29 */ 
/*       30 */ 

/**** FILE 'Compiler.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'Std_Macros.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 

/**** FILE 'Compiler.h' */

/*       28 */ 
/*       29 */ 

/**** FILE 'Compiler_Cfg.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */ 
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      190 */ 
/*      191 */ 
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 
/*      208 */ 
/*      209 */ 
/*      210 */ 
/*      211 */ 
/*      212 */ 
/*      213 */ 
/*      214 */ 
/*      215 */ 
/*      216 */ 
/*      217 */ 
/*      218 */ 
/*      219 */ 
/*      220 */ 
/*      221 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 
/*      227 */ 
/*      228 */ 
/*      229 */ 
/*      230 */ 
/*      231 */ 
/*      232 */ 
/*      233 */ 
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */ 
/*      241 */ 
/*      242 */ 
/*      243 */ 
/*      244 */ 
/*      245 */ 
/*      246 */ 
/*      247 */ 
/*      248 */ 
/*      249 */ 
/*      250 */ 
/*      251 */ 
/*      252 */ 
/*      253 */ 
/*      254 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 
/*      258 */ 
/*      259 */ 
/*      260 */ 
/*      261 */ 
/*      262 */ 
/*      263 */ 
/*      264 */ 
/*      265 */ 
/*      266 */ 
/*      267 */ 
/*      268 */ 
/*      269 */ 
/*      270 */ 
/*      271 */ 
/*      272 */ 
/*      273 */ 
/*      274 */ 
/*      275 */ 
/*      276 */ 
/*      277 */ 
/*      278 */ 
/*      279 */ 
/*      280 */ 
/*      281 */ 
/*      282 */ 
/*      283 */ 
/*      284 */ 
/*      285 */ 
/*      286 */ 
/*      287 */ 
/*      288 */ 
/*      289 */ 
/*      290 */ 
/*      291 */ 
/*      292 */ 
/*      293 */ 
/*      294 */ 
/*      295 */ 
/*      296 */ 
/*      297 */ 
/*      298 */ 
/*      299 */ 
/*      300 */ 
/*      301 */ 
/*      302 */ 
/*      303 */ 
/*      304 */ 
/*      305 */ 
/*      306 */ 
/*      307 */ 
/*      308 */ 
/*      309 */ 
/*      310 */ 
/*      311 */ 
/*      312 */ 
/*      313 */ 
/*      314 */ 
/*      315 */ 
/*      316 */ 
/*      317 */ 
/*      318 */ 
/*      319 */ 
/*      320 */ 
/*      321 */ 
/*      322 */ 
/*      323 */ 
/*      324 */ 
/*      325 */ 
/*      326 */ 
/*      327 */ 
/*      328 */ 
/*      329 */ 
/*      330 */ 
/*      331 */ 
/*      332 */ 
/*      333 */ 
/*      334 */ 
/*      335 */ 
/*      336 */ 
/*      337 */ 
/*      338 */ 
/*      339 */ 
/*      340 */ 
/*      341 */ 
/*      342 */ 
/*      343 */ 
/*      344 */ 
/*      345 */ 
/*      346 */ 
/*      347 */ 
/*      348 */ 
/*      349 */ 
/*      350 */ 
/*      351 */ 
/*      352 */ 
/*      353 */ 
/*      354 */ 
/*      355 */ 
/*      356 */ 
/*      357 */ 
/*      358 */ 
/*      359 */ 
/*      360 */ 
/*      361 */ 
/*      362 */ 
/*      363 */ 
/*      364 */ 
/*      365 */ 
/*      366 */ 
/*      367 */ 
/*      368 */ 
/*      369 */ 
/*      370 */ 
/*      371 */ 
/*      372 */ 
/*      373 */ 
/*      374 */ 
/*      375 */ 
/*      376 */ 
/*      377 */ 
/*      378 */ 
/*      379 */ 
/*      380 */ 
/*      381 */ 
/*      382 */ 
/*      383 */ 
/*      384 */ 
/*      385 */ 
/*      386 */ 
/*      387 */ 
/*      388 */ 
/*      389 */ 
/*      390 */ 
/*      391 */ 
/*      392 */ 
/*      393 */ 
/*      394 */ 
/*      395 */ 
/*      396 */ 
/*      397 */ 
/*      398 */ 
/*      399 */ 
/*      400 */ 
/*      401 */ 
/*      402 */ 
/*      403 */ 
/*      404 */ 
/*      405 */ 
/*      406 */ 
/*      407 */ 
/*      408 */ 
/*      409 */ 
/*      410 */ 
/*      411 */ 
/*      412 */ 
/*      413 */ 
/*      414 */ 
/*      415 */ 
/*      416 */ 
/*      417 */ 
/*      418 */ 
/*      419 */ 
/*      420 */ 
/*      421 */ 
/*      422 */ 
/*      423 */ 
/*      424 */ 
/*      425 */ 
/*      426 */ 
/*      427 */ 
/*      428 */ 
/*      429 */ 
/*      430 */ 
/*      431 */ 
/*      432 */ 
/*      433 */ 
/*      434 */ 
/*      435 */ 
/*      436 */ 
/*      437 */ 
/*      438 */ 
/*      439 */ 
/*      440 */ 
/*      441 */ 
/*      442 */ 
/*      443 */ 
/*      444 */ 
/*      445 */ 
/*      446 */ 
/*      447 */ 
/*      448 */ 
/*      449 */ 
/*      450 */ 
/*      451 */ 
/*      452 */ 
/*      453 */ 
/*      454 */ 
/*      455 */ 
/*      456 */ 
/*      457 */ 
/*      458 */ 
/*      459 */ 
/*      460 */ 
/*      461 */ 
/*      462 */ 
/*      463 */ 
/*      464 */ 
/*      465 */ 
/*      466 */ 
/*      467 */ 
/*      468 */ 
/*      469 */ 
/*      470 */ 
/*      471 */ 
/*      472 */ 
/*      473 */ 
/*      474 */ 
/*      475 */ 
/*      476 */ 
/*      477 */ 
/*      478 */ 
/*      479 */ 
/*      480 */ 
/*      481 */ 
/*      482 */ 
/*      483 */ 
/*      484 */ 
/*      485 */ 
/*      486 */ 
/*      487 */ 
/*      488 */ 
/*      489 */ 
/*      490 */ 
/*      491 */ 
/*      492 */ 
/*      493 */ 
/*      494 */ 
/*      495 */ 
/*      496 */ 
/*      497 */ 
/*      498 */ 
/*      499 */ 
/*      500 */ 
/*      501 */ 
/*      502 */ 
/*      503 */ 
/*      504 */ 
/*      505 */ 
/*      506 */ 
/*      507 */ 
/*      508 */ 
/*      509 */ 
/*      510 */ 
/*      511 */ 
/*      512 */ 
/*      513 */ 
/*      514 */ 
/*      515 */ 
/*      516 */ 
/*      517 */ 
/*      518 */ 
/*      519 */ 
/*      520 */ 
/*      521 */ 
/*      522 */ 
/*      523 */ 
/*      524 */ 
/*      525 */ 
/*      526 */ 
/*      527 */ 
/*      528 */ 
/*      529 */ 
/*      530 */ 
/*      531 */ 
/*      532 */ 
/*      533 */ 
/*      534 */ 
/*      535 */ 
/*      536 */ 
/*      537 */ 
/*      538 */ 
/*      539 */ 
/*      540 */ 
/*      541 */ 
/*      542 */ 
/*      543 */ 
/*      544 */ 
/*      545 */ 
/*      546 */ 
/*      547 */ 
/*      548 */ 
/*      549 */ 
/*      550 */ 
/*      551 */ 
/*      552 */ 
/*      553 */ 
/*      554 */ 
/*      555 */ 
/*      556 */ 
/*      557 */ 
/*      558 */ 
/*      559 */ 
/*      560 */ 
/*      561 */ 
/*      562 */ 
/*      563 */ 
/*      564 */ 
/*      565 */ 
/*      566 */ 
/*      567 */ 
/*      568 */ 
/*      569 */ 
/*      570 */ 
/*      571 */ 
/*      572 */ 
/*      573 */ 
/*      574 */ 
/*      575 */ 
/*      576 */ 
/*      577 */ 
/*      578 */ 
/*      579 */ 
/*      580 */ 
/*      581 */ 
/*      582 */ 
/*      583 */ 
/*      584 */ 
/*      585 */ 
/*      586 */ 
/*      587 */ 
/*      588 */ 
/*      589 */ 
/*      590 */ 
/*      591 */ 
/*      592 */ 
/*      593 */ 
/*      594 */ 
/*      595 */ 
/*      596 */ 
/*      597 */ 
/*      598 */ 
/*      599 */ 
/*      600 */ 
/*      601 */ 
/*      602 */ 
/*      603 */ 
/*      604 */ 
/*      605 */ 
/*      606 */ 
/*      607 */ 
/*      608 */ 
/*      609 */ 
/*      610 */ 
/*      611 */ 
/*      612 */ 
/*      613 */ 
/*      614 */ 
/*      615 */ 
/*      616 */ 
/*      617 */ 
/*      618 */ 
/*      619 */ 
/*      620 */ 
/*      621 */ 
/*      622 */ 
/*      623 */ 
/*      624 */ 
/*      625 */ 
/*      626 */ 
/*      627 */ 
/*      628 */ 
/*      629 */ 
/*      630 */ 
/*      631 */ 
/*      632 */ 
/*      633 */ 
/*      634 */ 
/*      635 */ 
/*      636 */ 
/*      637 */ 
/*      638 */ 
/*      639 */ 
/*      640 */ 
/*      641 */ 
/*      642 */ 
/*      643 */ 
/*      644 */ 
/*      645 */ 
/*      646 */ 
/*      647 */ 
/*      648 */ 
/*      649 */ 
/*      650 */ 
/*      651 */ 
/*      652 */ 
/*      653 */ 
/*      654 */ 
/*      655 */ 
/*      656 */ 
/*      657 */ 
/*      658 */ 
/*      659 */ 
/*      660 */ 
/*      661 */ 
/*      662 */ 
/*      663 */ 
/*      664 */ 
/*      665 */ 
/*      666 */ 
/*      667 */ 
/*      668 */ 
/*      669 */ 
/*      670 */ 
/*      671 */ 
/*      672 */ 
/*      673 */ 
/*      674 */ 
/*      675 */ 
/*      676 */ 
/*      677 */ 
/*      678 */ 
/*      679 */ 
/*      680 */ 
/*      681 */ 
/*      682 */ 
/*      683 */ 
/*      684 */ 
/*      685 */ 
/*      686 */ 
/*      687 */ 
/*      688 */ 
/*      689 */ 
/*      690 */ 
/*      691 */ 
/*      692 */ 
/*      693 */ 

/**** FILE 'Compiler.h' */

/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       55 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 

/**** FILE 'Std_Types.h' */

/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */  typedef uint8 StatusType ;
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */  typedef uint8 Std_ReturnType ;
/*       51 */ 
/*       52 */  typedef struct tagStd_VersionInfoType {
/*       53 */  uint16 vendorID ;
/*       54 */  uint16 moduleID ;
/*       55 */  uint8 instanceID ;
/*       56 */  uint8 sw_major_version ;
/*       57 */  uint8 sw_minor_version ;
/*       58 */  uint8 sw_patch_version ;
/*       59 */  } Std_VersionInfoType ;
/*       60 */ 
/*       61 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 

/**** FILE 'S12_Hw.h' */

/*       27 */ 
/*       28 */ 

/**** FILE 'CPU_Primitives.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       53 */ 
/*       54 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 

/**** FILE 'cpu12/codewarrior/cpri.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */  boolean CPU_INTERRUPTS_DISABLED ( void ) ;
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 

/**** FILE 'CPU_Primitives.h' */

/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 

/**** FILE 'S12_Hw.h' */

/*       28 */ 
/*       29 */ 

/**** FILE 'ISR.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 

/**** FILE 'Sys_Cfg.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 

/**** FILE 'Kdk_Cpus.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 

/**** FILE 'Sys_Cfg.h' */

/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 

/**** FILE 'ISR.h' */

/*       32 */ 
/*       33 */ 
/*       38 */ 
/*       39 */ 
/*       42 */ 
/*       48 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       82 */ 
/*       83 */  typedef void ( * const IISR_IVF ) ( void ) ;
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 

/**** FILE 'metrowerks/ISR_MW.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 

/**** FILE 'metrowerks/s12/ISR_MW_HCS12.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */  void __near _Startup ( void ) ;
/*       32 */ 
/*       33 */ 
/*       34 */  extern void ( * const interrupt_vectors [ ] ) ( void ) ;
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 

/**** FILE 'metrowerks/ISR_MW.h' */

/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 

/**** FILE 'ISR.h' */

/*      118 */ 
/*      119 */ 
/*      120 */ 

/**** FILE 'ISR_Cfg.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */  __interrupt void SystemTimerHandler ( void ) ;
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */  __interrupt void CAN0TxVector ( void ) ;
/*       38 */  __interrupt void CAN0RxVector ( void ) ;
/*       39 */  __interrupt void CAN0ErrorVector ( void ) ;
/*       40 */  __interrupt void CAN0WakupVector ( void ) ;
/*       41 */ 
/*       42 */  __interrupt void CAN1TxVector ( void ) ;
/*       43 */  __interrupt void CAN1RxVector ( void ) ;
/*       44 */  __interrupt void CAN1ErrorVector ( void ) ;
/*       45 */  __interrupt void CAN1WakupVector ( void ) ;
/*       46 */ 
/*       47 */  __interrupt void CAN2TxVector ( void ) ;
/*       48 */  __interrupt void CAN2RxVector ( void ) ;
/*       49 */  __interrupt void CAN2ErrorVector ( void ) ;
/*       50 */  __interrupt void CAN2WakupVector ( void ) ;
/*       51 */ 
/*       52 */  __interrupt void CAN3TxVector ( void ) ;
/*       53 */  __interrupt void CAN3RxVector ( void ) ;
/*       54 */  __interrupt void CAN3ErrorVector ( void ) ;
/*       55 */  __interrupt void CAN3WakupVector ( void ) ;
/*       56 */ 
/*       57 */  __interrupt void CAN4TxVector ( void ) ;
/*       58 */  __interrupt void CAN4RxVector ( void ) ;
/*       59 */  __interrupt void CAN4ErrorVector ( void ) ;
/*       60 */  __interrupt void CAN4WakupVector ( void ) ;
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */  __interrupt void S12Ect_TofHandler ( void ) ;
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */  __interrupt void SCI0_Vector ( void ) ;
/*       96 */ 
/*       97 */ 
/*       98 */  __interrupt void SCI1_Vector ( void ) ;
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      125 */ 
/*      126 */  __interrupt void SPI0_Vector ( void ) ;
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */  __interrupt void CRG_LockInterrupt ( void ) ;
/*      148 */ 
/*      149 */ 
/*      150 */  __interrupt void CRG_SelfClockModeInterrupt ( void ) ;
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 

/**** FILE 'ISR.h' */

/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */  void ISR_Init ( void ) ;
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 

/**** FILE 'S12_Hw.h' */

/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Can.h' */

/*       28 */ 
/*       29 */ 

/**** FILE 'Utl.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'Std_Types.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 

/**** FILE 'Utl.h' */

/*       27 */ 
/*       28 */ 

/**** FILE 'CPU_Primitives.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 

/**** FILE 'Utl.h' */

/*       28 */ 
/*       29 */ 
/*       33 */ 
/*       34 */  typedef enum tagUtl_EndianessType {
/*       35 */  UTL_BIG_ENDIAN ,
/*       36 */  UTL_LITTLE_ENDIAN
/*       37 */  } Utl_EndianessType ;
/*       38 */ 
/*       39 */  typedef struct tagUtl_DivremType {
/*       40 */  uint16 div , rem ;
/*       41 */  } Utl_DivremType ;
/*       42 */ 
/*       43 */ 
/*       44 */  typedef sint8 ( * Utl_CompareFuncType ) ( void const * lhs , void const * rhs ) ;
/*       45 */ 
/*       46 */  Utl_EndianessType Utl_CheckEndianess ( void ) ;
/*       47 */ 
/*       48 */  boolean Utl_BitGet ( uint16 w , uint8 num ) ;
/*       49 */  uint16 Utl_BitSet ( uint16 w , uint8 num ) ;
/*       50 */  uint16 Utl_BitReset ( uint16 w , uint8 num ) ;
/*       51 */  uint16 Utl_BitToggle ( uint16 w , uint8 num ) ;
/*       52 */  uint16 Utl_BitGetHighest ( uint16 w ) ;
/*       53 */  uint16 Utl_BitGetLowest ( uint16 w ) ;
/*       54 */  uint16 Utl_BitSetLowest ( uint16 w ) ;
/*       55 */  uint16 Utl_BitResetLowest ( uint16 w ) ;
/*       56 */ 
/*       57 */  uint8 Utl_Log2 ( uint16 num ) ;
/*       58 */ 
/*       59 */  void Utl_Itoa ( uint32 value , uint8 base , uint8 * buf ) ;
/*       60 */ 
/*       61 */  void Utl_MemCopy ( void * dst , void * src , SizeType len ) ;
/*       62 */  void Utl_MemSet ( void * dest , uint8 fill_char , SizeType len ) ;
/*       63 */ 
/*       64 */  SizeType Utl_StrLen ( const uint8 * src ) ;
/*       65 */  void Utl_StrCat ( uint8 * dst , const uint8 * src ) ;
/*       66 */  void Utl_StrCpy ( uint8 * dst , const uint8 * src ) ;
/*       67 */  void Utl_StrNCpy ( uint8 * dst , const uint8 * src , SizeType maxlen ) ;
/*       68 */  void Utl_StrRev ( uint8 * str ) ;
/*       69 */  const uint8 * Utl_StrChr ( const uint8 * str , uint8 ch ) ;
/*       70 */ 
/*       71 */  void const * Utl_BinSearch ( void const * key , void const * base , uint16 num_elems , uint16 elem_size , Utl_CompareFuncType compare_func ) ;
/*       72 */ 
/*       73 */  void Utl_Divrem ( uint16 dividend , uint16 divisor , Utl_DivremType * res ) ;
/*       74 */  boolean Utl_FloatsAreNearlyEqual ( float32 lhs , float32 rhs , sint32 max_difference ) ;
/*       75 */ 
/*       76 */  void Utl_Randomize ( uint16 seed ) ;
/*       77 */  uint16 Utl_Random ( void ) ;
/*       78 */ 
/*       79 */  typedef struct tagUtl_JumpBufType {
/*       80 */  SizeType pc ;
/*       81 */  SizeType sp ;
/*       82 */  } Utl_JumpBufType ;
/*       83 */ 
/*       84 */  void Utl_LongJump ( Utl_JumpBufType * buf , sint16 val ) ;
/*       85 */  uint16 Utl_SetJump ( Utl_JumpBufType * buf ) ;
/*       86 */ 
/*       87 */  boolean Utl_IsNull ( void * Ptr ) ;
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 

/**** FILE 'S12_Can.h' */

/*       29 */ 
/*       30 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */ 
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      190 */ 
/*      191 */ 
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 
/*      208 */ 
/*      209 */ 
/*      210 */ 
/*      211 */ 
/*      212 */ 
/*      213 */ 
/*      214 */ 
/*      215 */ 
/*      216 */ 
/*      217 */ 
/*      218 */ 
/*      219 */ 
/*      220 */ 
/*      221 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 
/*      227 */ 
/*      228 */ 
/*      229 */ 
/*      230 */ 
/*      231 */ 
/*      232 */ 
/*      233 */ 
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */  typedef enum tagS12Can_StatusType {
/*      241 */  S12CAN_OK ,
/*      242 */  S12CAN_UNINIT ,
/*      243 */  S12CAN_ID ,
/*      244 */  S12CAN_STATE ,
/*      245 */  S12CAN_VALUE
/*      246 */ 
/*      247 */  } S12Can_StatusType ;
/*      248 */ 
/*      249 */  typedef struct tagS12Can_BufferType {
/*      250 */  uint8 IDR0 ;
/*      251 */  uint8 IDR1 ;
/*      252 */  uint8 IDR2 ;
/*      253 */  uint8 IDR3 ;
/*      254 */  uint8 DSR0 ;
/*      255 */  uint8 DSR1 ;
/*      256 */  uint8 DSR2 ;
/*      257 */  uint8 DSR3 ;
/*      258 */  uint8 DSR4 ;
/*      259 */  uint8 DSR5 ;
/*      260 */  uint8 DSR6 ;
/*      261 */  uint8 DSR7 ;
/*      262 */  uint8 DLR ;
/*      263 */  uint8 TBPR ;
/*      264 */  uint8 TSRH ;
/*      265 */  uint8 TSRL ;
/*      266 */  } S12Can_BufferType ;
/*      267 */ 
/*      268 */  typedef uint8 S12Can_IdentifierType [ ( ( uint8 ) 0x08 ) ] ;
/*      269 */  typedef uint8 S12Can_SDUType [ ( ( uint8 ) 0x08 ) ] ;
/*      270 */ 
/*      271 */  typedef struct tagS12Can_BusTimingType {
/*      272 */  uint8 BRT0 ;
/*      273 */  uint8 BRT1 ;
/*      274 */  } S12Can_BusTimingType ;
/*      275 */ 
/*      276 */  typedef struct tagS12Can_MessageType {
/*      277 */  uint32 ID ;
/*      278 */  uint8 DLR ;
/*      279 */  S12Can_SDUType SDU ;
/*      280 */  } S12Can_MessageType ;
/*      281 */ 
/*      282 */  typedef struct tagS12Can_FilterType {
/*      283 */  uint8 FilterMode ;
/*      284 */  S12Can_IdentifierType IdentifierAcceptance ;
/*      285 */  S12Can_IdentifierType IdentifierMask ;
/*      286 */  } S12Can_FilterType ;
/*      287 */ 
/*      288 */  typedef struct tagS12Can_ConfigType {
/*      289 */  uint16 BaseAddr ;
/*      290 */  S12Can_FilterType Filter ;
/*      291 */  } S12Can_ConfigType ;
/*      292 */ 
/*      293 */ 
/*      294 */ 
/*      295 */ 
/*      296 */ 
/*      297 */ 
/*      298 */ 
/*      299 */ 
/*      300 */ 
/*      301 */ 
/*      302 */ 
/*      303 */ 
/*      304 */ 
/*      305 */ 
/*      306 */ 
/*      307 */ 
/*      308 */ 
/*      309 */ 
/*      310 */ 
/*      311 */ 
/*      312 */ 
/*      313 */ 
/*      314 */ 
/*      315 */ 
/*      316 */ 
/*      317 */ 
/*      318 */  S12Can_StatusType S12Can_Init ( S12Can_ConfigType const * const Cfg , uint8 btr0 , uint8 btr1 ) ;
/*      319 */  S12Can_StatusType S12Can_Stop ( S12Can_ConfigType const * const Cfg ) ;
/*      320 */  S12Can_StatusType S12Can_InitializationMode ( S12Can_ConfigType const * const Cfg , boolean enable ) ;
/*      321 */  S12Can_StatusType S12Can_SleepMode ( S12Can_ConfigType const * const Cfg , boolean enable ) ;
/*      322 */ 
/*      323 */  boolean S12Can_Enabled ( S12Can_ConfigType const * const Cfg ) ;
/*      324 */  boolean S12Can_Sleeping ( S12Can_ConfigType const * const Cfg ) ;
/*      325 */  boolean S12Can_Initializing ( S12Can_ConfigType const * const Cfg ) ;
/*      326 */  boolean S12Can_Synchronized ( S12Can_ConfigType const * const Cfg ) ;
/*      327 */ 
/*      328 */  S12Can_StatusType S12Can_SetBusTiming ( S12Can_ConfigType const * const Cfg , uint8 btr0 , uint8 btr1 ) ;
/*      329 */  S12Can_StatusType S12Can_SetFilter ( S12Can_ConfigType const * const Cfg , const S12Can_FilterType * Filter ) ;
/*      330 */  S12Can_StatusType S12Can_EnableInterrupts ( S12Can_ConfigType const * const Cfg , boolean enable ) ;
/*      331 */  S12Can_StatusType S12Can_Transmit ( S12Can_ConfigType const * const Cfg , S12Can_MessageType const * Msg , uint8 priority , uint8 * SentOnBuffer ) ;
/*      332 */  S12Can_StatusType S12Can_Ready ( S12Can_ConfigType const * const Cfg , boolean * ready ) ;
/*      333 */  S12Can_StatusType S12Can_RxD ( S12Can_ConfigType const * const Cfg , boolean * rxd ) ;
/*      334 */  S12Can_StatusType S12Can_WaitSynch ( S12Can_ConfigType const * const Cfg ) ;
/*      335 */  S12Can_StatusType S12Can_CancelMessage ( S12Can_ConfigType const * const Cfg , uint8 Number ) ;
/*      336 */  S12Can_StatusType S12Can_CopyRxBuffer ( S12Can_ConfigType const * const Cfg , S12Can_MessageType * Msg ) ;
/*      337 */  S12Can_StatusType S12Can_GetErrorCounters ( S12Can_ConfigType const * const Cfg , uint8 * RxErrors , uint8 * TxErrors ) ;
/*      338 */ 
/*      339 */ 
/*      340 */ 
/*      341 */ 
/*      342 */ 
/*      343 */  void Can_HandleIrqTx ( S12Can_ConfigType const * const Cfg ) ;
/*      344 */  void Can_HandleIrqRx ( S12Can_ConfigType const * const Cfg ) ;
/*      345 */  void Can_HandleIrqErr ( S12Can_ConfigType const * const Cfg ) ;
/*      346 */  void Can_HandleIrqWup ( S12Can_ConfigType const * const Cfg ) ;
/*      347 */ 
/*      348 */ 
/*      351 */ 
/*      352 */ 
/*      353 */ 
/*      354 */ 
/*      355 */ 

/**** FILE 'C:\projekte\csProjects\trunk\drivers\src\cpu12\S12_Can.c' */

/*        3 */ 
/*        4 */ 

/**** FILE 'Hw_Cfg.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Atd.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'S12_Crg.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Mebi.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Mebi.h' */

/*       27 */ 
/*       28 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */  typedef enum tagS12Mebi_ModeType {
/*      149 */  S12MODE_SPECIAL_SINGLE_CHIP ,
/*      150 */  S12MODE_EMULATION_NARROW ,
/*      151 */  S12MODE_SPECIAL_TEST ,
/*      152 */  S12MODE_EMULATION_WIDE ,
/*      153 */  S12MODE_NORMAL_SINGLE_CHIP ,
/*      154 */  S12MODE_NORMAL_EXPANDED_NARROW ,
/*      155 */  S12MODE_SPECIAL_PERIPHAL ,
/*      156 */  S12MODE_NORMAL_EXPANDED_WIDE
/*      157 */  } S12Mebi_ModeType ;
/*      158 */ 
/*      159 */ 
/*      160 */  typedef struct tagS12Mebi_ConfigType {
/*      161 */  uint16 BaseAddr ;
/*      162 */ 
/*      163 */  uint8 Pucr ;
/*      164 */  uint8 Rdriv ;
/*      165 */  uint8 IrqCr ;
/*      166 */ 
/*      167 */ 
/*      168 */  uint8 DdrA ;
/*      169 */  uint8 PortA ;
/*      170 */ 
/*      171 */ 
/*      172 */  uint8 DdrB ;
/*      173 */  uint8 PortB ;
/*      174 */ 
/*      175 */ 
/*      176 */  uint8 DdrE ;
/*      177 */  uint8 PortE ;
/*      178 */ 
/*      179 */ 
/*      180 */  uint8 DdrK ;
/*      181 */  uint8 PortK ;
/*      182 */ 
/*      183 */  } S12Mebi_ConfigType ;
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */  void S12Mebi_Init ( S12Mebi_ConfigType const * ConfigPtr ) ;
/*      190 */  S12Mebi_ModeType S12Mebi_GetMode ( void ) ;
/*      191 */  boolean S12Mebi_SpecialMode ( void ) ;
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 

/**** FILE 'S12_Crg.h' */

/*       27 */ 
/*       28 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */  typedef enum tagS12Crg_StatusType {
/*      134 */  S12CRG_OK ,
/*      135 */  S12CRG_STATE ,
/*      136 */  S12CRG_VALUE
/*      137 */ 
/*      138 */  } S12Crg_StatusType ;
/*      139 */ 
/*      140 */  typedef enum tagS12Crg_PllLockType {
/*      141 */  S12CRG_PLL_LOCKED ,
/*      142 */  S12CRG_PLL_UNLOCKED
/*      143 */  } S12Crg_PllLockType ;
/*      144 */ 
/*      145 */  typedef struct tagS12Crg_ConfigType {
/*      146 */  uint16 BaseAddr ;
/*      147 */  uint8 OscFreq ;
/*      148 */ 
/*      149 */  uint8 MaxBusFreq ;
/*      150 */  boolean EnableWatchdog ;
/*      151 */  uint8 WatchdogPrescaler ;
/*      152 */  boolean EnableRTI ;
/*      153 */  uint8 RTIPrescaler ;
/*      154 */  uint8 RTIModulo ;
/*      155 */  } S12Crg_ConfigType ;
/*      156 */ 
/*      157 */  typedef void ( * S12Crg_CB_PllLockChanged ) ( S12Crg_PllLockType Lock ) ;
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */  S12Crg_StatusType S12Crg_Init ( uint8 freq ) ;
/*      164 */ 
/*      165 */  S12Crg_StatusType S12Crg_EnablePLL ( void ) ;
/*      166 */  S12Crg_StatusType S12Crg_DisablePLL ( void ) ;
/*      167 */  boolean S12Crg_PLLEnabled ( void ) ;
/*      168 */  S12Crg_StatusType S12Crg_SetPLLFreq ( uint8 freq ) ;
/*      169 */  S12Crg_StatusType S12Crg_SetPLLParams ( uint8 refdv , uint8 synr ) ;
/*      170 */  boolean S12Crg_PLLLocked ( void ) ;
/*      171 */ 
/*      172 */  S12Crg_StatusType S12Crg_EnableRTI ( void ) ;
/*      173 */  S12Crg_StatusType S12Crg_DisableRTI ( void ) ;
/*      174 */  boolean S12Crg_RTIEnabled ( void ) ;
/*      175 */  S12Crg_StatusType S12Crg_SetRTIRate ( uint8 rate ) ;
/*      176 */ 
/*      177 */  uint8 S12Crg_GetBusFreq ( void ) ;
/*      178 */  uint8 S12Crg_GetOscFreq ( void ) ;
/*      179 */ 
/*      180 */  void S12Crg_TriggerWDG ( void ) ;
/*      181 */  void S12Crg_ResetMCU ( void ) ;
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 

/**** FILE 'S12_Atd.h' */

/*       28 */ 
/*       29 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */  typedef enum tagS12Atd_StatusType {
/*      179 */  S12ATD_OK ,
/*      180 */  S12ATD_UNINIT ,
/*      181 */  S12ATD_ID
/*      182 */  } S12Atd_StatusType ;
/*      183 */ 
/*      184 */ 
/*      185 */  typedef enum tagS12Atd_SampleChannelType {
/*      186 */  S12ATD_SMP_CHN_AD0 ,
/*      187 */  S12ATD_SMP_CHN_AD1 ,
/*      188 */  S12ATD_SMP_CHN_AD2 ,
/*      189 */  S12ATD_SMP_CHN_AD3 ,
/*      190 */  S12ATD_SMP_CHN_AD4 ,
/*      191 */  S12ATD_SMP_CHN_AD5 ,
/*      192 */  S12ATD_SMP_CHN_AD6 ,
/*      193 */  S12ATD_SMP_CHN_AD7 ,
/*      194 */  S12ATD_SMP_CHN_AD8 ,
/*      195 */  S12ATD_SMP_CHN_AD9 ,
/*      196 */  S12ATD_SMP_CHN_AD10 ,
/*      197 */  S12ATD_SMP_CHN_AD11 ,
/*      198 */  S12ATD_SMP_CHN_AD12 ,
/*      199 */  S12ATD_SMP_CHN_AD13 ,
/*      200 */  S12ATD_SMP_CHN_AD14 ,
/*      201 */  S12ATD_SMP_CHN_AD15 ,
/*      202 */  S12ATD_SMP_CHN_ANY = 0xff
/*      203 */  } S12Atd_SampleChannelType ;
/*      204 */ 
/*      205 */ 
/*      206 */  typedef enum tagS12Atd_ExternalTriggerType {
/*      207 */  S12ATD_EXT_TRIG_FALLING_EDGE ,
/*      208 */  S12ATD_EXT_TRIG_RISING_EDGE ,
/*      209 */  S12ATD_EXT_TRIG_LOW_LEVEL ,
/*      210 */  S12ATD_EXT_TRIG_HIGH_LEVEL ,
/*      211 */  S12ATD_EXT_TRIG_DISABLED
/*      212 */  } S12Atd_ExternalTriggerType ;
/*      213 */ 
/*      214 */ 
/*      215 */  typedef enum tagS12Atd_ConversionTimeType {
/*      216 */  S12ATD_CONV_TIME_FAST ,
/*      217 */  S12ATD_CONV_TIME_MEDIUM_FAST ,
/*      218 */  S12ATD_CONV_TIME_MEDIUM_SLOW ,
/*      219 */  S12ATD_CONV_TIME_SLOW
/*      220 */  } S12Atd_ConversionTimeType ;
/*      221 */ 
/*      222 */ 
/*      223 */  typedef struct tagS12Atd_ConfigType {
/*      224 */  uint16 BaseAddr ;
/*      225 */  uint8 Prescaler ;
/*      226 */  boolean TenBit ;
/*      227 */  S12Atd_ExternalTriggerType ExternalTrigger ;
/*      228 */  boolean EnableCompletionInterrupt ;
/*      229 */  boolean ContinuousConversion ;
/*      230 */  S12Atd_ConversionTimeType ConversionTime ;
/*      231 */ 
/*      232 */ 
/*      233 */  } S12Atd_ConfigType ;
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */ 
/*      241 */  S12Atd_StatusType S12Atd_Init ( S12Atd_ConfigType const * const Cfg ) ;
/*      242 */  S12Atd_StatusType S12Atd_GetChannel ( S12Atd_ConfigType const * const Cfg , uint8 chn , uint16 * result ) ;
/*      243 */ 
/*      244 */ 
/*      247 */ 
/*      248 */ 
/*      249 */ 
/*      250 */ 
/*      251 */ 

/**** FILE 'Hw_Cfg.h' */

/*       27 */ 
/*       28 */ 

/**** FILE 'S12_Bkp.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Bkp.h' */

/*       27 */ 
/*       28 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */  typedef struct tagS12Bkp_ConfigType {
/*       86 */  uint16 BaseAddr ;
/*       87 */  } S12Bkp_ConfigType ;
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 

/**** FILE 'Hw_Cfg.h' */

/*       28 */ 
/*       29 */ 

/**** FILE 'S12_Can.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*      353 */ 
/*      354 */ 
/*      355 */ 

/**** FILE 'Hw_Cfg.h' */

/*       29 */ 
/*       30 */ 

/**** FILE 'S12_Ect.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Ect.h' */

/*       28 */ 
/*       29 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */ 
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      190 */ 
/*      191 */ 
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 
/*      208 */ 
/*      209 */ 
/*      210 */ 
/*      211 */ 
/*      212 */ 
/*      213 */ 
/*      214 */ 
/*      215 */ 
/*      216 */ 
/*      217 */ 
/*      218 */ 
/*      219 */ 
/*      220 */ 
/*      221 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 
/*      227 */ 
/*      228 */ 
/*      229 */ 
/*      230 */ 
/*      231 */ 
/*      232 */ 
/*      233 */ 
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */ 
/*      241 */ 
/*      242 */ 
/*      243 */ 
/*      244 */ 
/*      245 */ 
/*      246 */ 
/*      247 */ 
/*      248 */ 
/*      249 */ 
/*      250 */ 
/*      251 */ 
/*      252 */ 
/*      253 */ 
/*      254 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 
/*      258 */ 
/*      259 */ 
/*      260 */ 
/*      261 */ 
/*      262 */ 
/*      263 */ 
/*      264 */ 
/*      265 */ 
/*      266 */ 
/*      267 */ 
/*      268 */ 
/*      269 */ 
/*      270 */ 
/*      271 */ 
/*      272 */ 
/*      273 */ 
/*      274 */ 
/*      275 */ 
/*      276 */ 
/*      277 */ 
/*      278 */ 
/*      279 */ 
/*      280 */ 
/*      281 */ 
/*      282 */ 
/*      283 */ 
/*      284 */ 
/*      285 */ 
/*      286 */ 
/*      287 */ 
/*      288 */ 
/*      289 */ 
/*      290 */ 
/*      291 */ 
/*      292 */ 
/*      293 */ 
/*      294 */ 
/*      295 */ 
/*      296 */ 
/*      297 */ 
/*      298 */ 
/*      299 */ 
/*      300 */ 
/*      301 */ 
/*      302 */ 
/*      303 */ 
/*      304 */ 
/*      305 */ 
/*      306 */ 
/*      307 */ 
/*      308 */ 
/*      309 */ 
/*      310 */ 
/*      311 */ 
/*      312 */ 
/*      313 */ 
/*      314 */ 
/*      315 */ 
/*      316 */ 
/*      317 */ 
/*      318 */  typedef enum tagS12Ect_StatusType {
/*      319 */  S12ECT_OK
/*      320 */  } S12Ect_StatusType ;
/*      321 */ 
/*      322 */ 
/*      323 */  typedef struct tagS12Ect_ConfigType {
/*      324 */  uint16 BaseAddr ;
/*      325 */  uint16 cycle ;
/*      326 */ 
/*      327 */  uint8 TIos ;
/*      328 */  uint8 TScr1 ;
/*      329 */  uint8 TScr2 ;
/*      330 */  uint8 TCtl1 ;
/*      331 */  uint8 TCtl2 ;
/*      332 */  uint8 TCtl3 ;
/*      333 */  uint8 TCtl4 ;
/*      334 */  uint8 TIe ;
/*      335 */ 
/*      336 */  uint8 PActl ;
/*      337 */  uint8 PBctl ;
/*      338 */  uint8 ICpar ;
/*      339 */  uint8 MCctl ;
/*      340 */  uint16 MCcnt ;
/*      341 */  uint8 DLyct ;
/*      342 */  uint8 ICovw ;
/*      343 */  uint8 ICsys ;
/*      344 */  } S12Ect_ConfigType ;
/*      345 */ 
/*      346 */ 
/*      347 */ 
/*      348 */ 
/*      349 */ 
/*      350 */ 
/*      351 */ 
/*      352 */ 
/*      353 */ 
/*      354 */ 
/*      355 */ 
/*      356 */ 
/*      357 */ 
/*      358 */ 
/*      359 */ 
/*      360 */ 
/*      361 */ 
/*      362 */ 
/*      363 */ 
/*      364 */ 
/*      365 */ 
/*      366 */ 
/*      367 */ 
/*      368 */ 
/*      369 */ 
/*      370 */ 
/*      371 */ 
/*      372 */  void S12Ect_Init ( void ) ;
/*      373 */ 
/*      374 */ 
/*      375 */ 
/*      376 */ 
/*      377 */  uint16 S12Ect_GetOverflowCount ( void ) ;
/*      378 */  uint32 S12Ect_GetTickCount ( void ) ;
/*      379 */ 
/*      380 */ 
/*      381 */ 
/*      384 */ 
/*      385 */ 
/*      386 */ 
/*      387 */ 
/*      388 */ 

/**** FILE 'Hw_Cfg.h' */

/*       30 */ 
/*       31 */ 

/**** FILE 'S12_Fls.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Mmc.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Mmc.h' */

/*       27 */ 
/*       28 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */  typedef enum tagS12Mmc_StatusType {
/*      102 */  S12MMC_OK
/*      103 */  } S12Mmc_StatusType ;
/*      104 */ 
/*      105 */  typedef struct tagS12Mmc_ConfigType {
/*      106 */  uint16 BaseAddr ;
/*      107 */  uint8 InitRM ;
/*      108 */  uint8 InitRG ;
/*      109 */  uint8 InitEE ;
/*      110 */  uint8 Misc ;
/*      111 */  } S12Mmc_ConfigType ;
/*      112 */ 
/*      113 */  S12Mmc_StatusType S12Mmc_Init ( void ) ;
/*      114 */  S12Mmc_StatusType S12Mmc_SetPPage ( uint8 ppage ) ;
/*      115 */  S12Mmc_StatusType S12Mmc_GetPPage ( uint8 * ppage ) ;
/*      116 */ 
/*      117 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 

/**** FILE 'S12_Fls.h' */

/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */  typedef enum tagS12Fls_StatusType {
/*      117 */  S12FLS_OK ,
/*      118 */  S12FLS_UNINIT ,
/*      119 */  S12FLS_ERR_PVIOL ,
/*      120 */  S12FLS_ERR_ACC ,
/*      121 */  S12FLS_ERR_ADDR
/*      122 */  } Fls_StatusType ;
/*      123 */ 
/*      124 */ 
/*      125 */  typedef struct tagS12Fls_ConfigType {
/*      126 */  uint16 BaseAddr ;
/*      127 */  } S12Fls_ConfigType ;
/*      128 */ 
/*      129 */ 
/*      130 */  typedef struct tagS12Fls_Geometry {
/*      131 */  uint8 num_blocks ;
/*      132 */  uint8 pages_per_block ;
/*      133 */  uint8 sectors_per_page ;
/*      134 */  uint16 bytes_per_sector ;
/*      135 */  } S12Fls_Geometry ;
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */  void S12Fls_Init ( void ) ;
/*      144 */  Fls_StatusType S12Fls_DoCmd ( uint8 cmd , uint8 page , uint16 addr , uint16 data ) ;
/*      145 */  boolean S12Fls_VerifyErase ( uint8 block_num ) ;
/*      146 */ 
/*      147 */  Fls_StatusType S12Fls_SectorErase ( uint8 page , uint16 addr ) ;
/*      148 */  Fls_StatusType S12Fls_MassErase ( uint8 block_num ) ;
/*      149 */  Fls_StatusType S12Fls_PageErase ( uint8 page ) ;
/*      150 */ 
/*      151 */  Fls_StatusType S12Fls_ProgramWord ( uint8 page , uint16 addr , uint16 data ) ;
/*      152 */  Fls_StatusType S12Fls_BurstProgram ( uint8 page , uint16 start_addr , uint16 const * data , uint16 len ) ;
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 

/**** FILE 'Hw_Cfg.h' */

/*       31 */ 
/*       32 */ 

/**** FILE 'S12_Iic.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Iic.h' */

/*       29 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */  typedef struct tagS12Iic_ConfigType {
/*       92 */  uint16 BaseAddr ;
/*       93 */  uint8 Prescaler ;
/*       94 */  } S12Iic_ConfigType ;
/*       95 */ 
/*       96 */ 
/*       97 */  typedef enum taS12Iic_StatusType {
/*       98 */  S12IIC_OK ,
/*       99 */  S12IIC_UNINIT ,
/*      100 */  S12IIC_ID ,
/*      101 */  S12IIC_STATE ,
/*      102 */  S12IIC_VALUE
/*      103 */  } S12Iic_StatusType ;
/*      104 */ 
/*      105 */  typedef void ( * IIC_PresenceCallback ) ( uint8 addr ) ;
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */  void S12Iic_Init ( S12Iic_ConfigType const * const Cfg ) ;
/*      114 */  void S12Iic_Start ( S12Iic_ConfigType const * const Cfg ) ;
/*      115 */  void S12Iic_Restart ( S12Iic_ConfigType const * const Cfg ) ;
/*      116 */  void S12Iic_Stop ( S12Iic_ConfigType const * const Cfg ) ;
/*      117 */  boolean S12Iic_Write ( S12Iic_ConfigType const * const Cfg , uint8 b ) ;
/*      118 */  void S12Iic_Read ( S12Iic_ConfigType const * const Cfg , uint8 * b , boolean ack ) ;
/*      119 */ 
/*      120 */ 
/*      121 */  boolean S12Iic_PresenceCheck ( S12Iic_ConfigType const * const Cfg , uint8 slave_base_addr , uint8 nbits , IIC_PresenceCallback callback ) ;
/*      122 */ 
/*      123 */  boolean S12Iic_ModeReq ( S12Iic_ConfigType const * const Cfg , uint8 slave_addr , boolean write ) ;
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 

/**** FILE 'Hw_Cfg.h' */

/*       32 */ 
/*       33 */ 

/**** FILE 'S12_Int.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Int.h' */

/*       27 */ 
/*       28 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */  typedef struct tagS12Int_ConfigType {
/*       67 */  uint16 BaseAddr ;
/*       68 */  } S12Int_ConfigType ;
/*       69 */ 
/*       70 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 

/**** FILE 'Hw_Cfg.h' */

/*       33 */ 
/*       34 */ 

/**** FILE 'S12_Mebi.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 

/**** FILE 'Hw_Cfg.h' */

/*       34 */ 
/*       35 */ 

/**** FILE 'S12_Mmc.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 

/**** FILE 'Hw_Cfg.h' */

/*       35 */ 
/*       36 */ 

/**** FILE 'S12_Pim.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Pim.h' */

/*       27 */ 
/*       28 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */ 
/*      181 */ 
/*      182 */ 
/*      183 */ 
/*      184 */ 
/*      185 */ 
/*      186 */ 
/*      187 */ 
/*      188 */ 
/*      189 */ 
/*      190 */ 
/*      191 */ 
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */ 
/*      198 */ 
/*      199 */ 
/*      200 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 
/*      208 */ 
/*      209 */ 
/*      210 */ 
/*      211 */ 
/*      212 */ 
/*      213 */ 
/*      214 */ 
/*      215 */ 
/*      216 */ 
/*      217 */ 
/*      218 */ 
/*      219 */ 
/*      220 */ 
/*      221 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 
/*      227 */ 
/*      228 */ 
/*      229 */ 
/*      230 */ 
/*      231 */ 
/*      232 */ 
/*      233 */ 
/*      234 */ 
/*      235 */ 
/*      236 */ 
/*      237 */ 
/*      238 */ 
/*      239 */ 
/*      240 */ 
/*      241 */ 
/*      242 */ 
/*      243 */ 
/*      244 */ 
/*      245 */ 
/*      246 */ 
/*      247 */ 
/*      248 */ 
/*      249 */ 
/*      250 */ 
/*      251 */ 
/*      252 */ 
/*      253 */ 
/*      254 */ 
/*      255 */ 
/*      256 */ 
/*      257 */ 
/*      258 */ 
/*      259 */ 
/*      260 */ 
/*      261 */ 
/*      262 */ 
/*      263 */ 
/*      264 */ 
/*      265 */ 
/*      266 */ 
/*      267 */ 
/*      268 */ 
/*      269 */ 
/*      270 */ 
/*      271 */ 
/*      272 */ 
/*      273 */ 
/*      274 */ 
/*      275 */ 
/*      276 */ 
/*      277 */ 
/*      278 */ 
/*      279 */ 
/*      280 */ 
/*      281 */ 
/*      282 */ 
/*      283 */ 
/*      284 */ 
/*      285 */ 
/*      286 */ 
/*      287 */ 
/*      288 */ 
/*      289 */ 
/*      290 */ 
/*      291 */ 
/*      292 */ 
/*      293 */ 
/*      294 */ 
/*      295 */ 
/*      296 */ 
/*      297 */ 
/*      298 */ 
/*      299 */ 
/*      300 */ 
/*      301 */ 
/*      302 */ 
/*      303 */ 
/*      304 */ 
/*      305 */ 
/*      306 */ 
/*      307 */ 
/*      308 */ 
/*      309 */ 
/*      310 */ 
/*      311 */ 
/*      312 */ 
/*      313 */ 
/*      314 */ 
/*      315 */ 
/*      316 */ 
/*      317 */ 
/*      318 */ 
/*      319 */ 
/*      320 */ 
/*      321 */ 
/*      322 */ 
/*      323 */ 
/*      324 */ 
/*      325 */ 
/*      326 */ 
/*      327 */ 
/*      328 */ 
/*      329 */ 
/*      330 */ 
/*      331 */ 
/*      332 */ 
/*      333 */ 
/*      334 */ 
/*      335 */ 
/*      336 */ 
/*      337 */ 
/*      338 */ 
/*      339 */ 
/*      340 */ 
/*      341 */ 
/*      342 */ 
/*      343 */ 
/*      344 */ 
/*      345 */ 
/*      346 */ 
/*      347 */ 
/*      348 */ 
/*      349 */ 
/*      350 */ 
/*      351 */ 
/*      352 */ 
/*      353 */ 
/*      354 */ 
/*      355 */ 
/*      356 */ 
/*      357 */ 
/*      358 */ 
/*      359 */ 
/*      360 */ 
/*      361 */ 
/*      362 */ 
/*      363 */ 
/*      364 */ 
/*      365 */ 
/*      366 */ 
/*      367 */ 
/*      368 */ 
/*      369 */ 
/*      370 */ 
/*      371 */ 
/*      372 */ 
/*      373 */ 
/*      374 */ 
/*      375 */ 
/*      376 */ 
/*      377 */ 
/*      378 */ 
/*      379 */ 
/*      380 */ 
/*      381 */ 
/*      382 */ 
/*      383 */ 
/*      384 */ 
/*      385 */ 
/*      386 */ 
/*      387 */ 
/*      388 */ 
/*      389 */ 
/*      390 */ 
/*      391 */ 
/*      392 */ 
/*      393 */ 
/*      394 */ 
/*      395 */ 
/*      396 */ 
/*      397 */ 
/*      398 */ 
/*      399 */ 
/*      400 */ 
/*      401 */ 
/*      402 */ 
/*      403 */ 
/*      404 */ 
/*      405 */ 
/*      406 */ 
/*      407 */ 
/*      408 */ 
/*      409 */ 
/*      410 */ 
/*      411 */ 
/*      412 */ 
/*      413 */ 
/*      414 */ 
/*      415 */ 
/*      416 */ 
/*      417 */ 
/*      418 */ 
/*      419 */ 
/*      420 */ 
/*      421 */ 
/*      422 */ 
/*      423 */ 
/*      424 */ 
/*      425 */ 
/*      426 */ 
/*      427 */ 
/*      428 */ 
/*      429 */ 
/*      430 */ 
/*      431 */ 
/*      432 */ 
/*      433 */ 
/*      434 */ 
/*      435 */ 
/*      436 */ 
/*      437 */ 
/*      438 */ 
/*      439 */ 
/*      440 */ 
/*      441 */ 
/*      442 */ 
/*      443 */ 
/*      444 */ 
/*      445 */ 
/*      446 */ 
/*      447 */ 
/*      448 */ 
/*      449 */ 
/*      450 */ 
/*      451 */ 
/*      452 */ 
/*      453 */ 
/*      454 */ 
/*      455 */ 
/*      456 */ 
/*      457 */ 
/*      458 */ 
/*      459 */ 
/*      460 */ 
/*      461 */ 
/*      462 */ 
/*      463 */ 
/*      464 */ 
/*      465 */ 
/*      466 */ 
/*      467 */ 
/*      468 */ 
/*      469 */ 
/*      470 */ 
/*      471 */ 
/*      472 */ 
/*      473 */ 
/*      474 */ 
/*      475 */ 
/*      476 */ 
/*      477 */ 
/*      478 */ 
/*      479 */ 
/*      480 */ 
/*      481 */ 
/*      482 */ 
/*      483 */ 
/*      484 */ 
/*      485 */ 
/*      486 */ 
/*      487 */ 
/*      488 */ 
/*      489 */ 
/*      490 */ 
/*      491 */ 
/*      492 */ 
/*      493 */ 
/*      494 */ 
/*      495 */ 
/*      496 */ 
/*      497 */ 
/*      498 */ 
/*      499 */ 
/*      500 */ 
/*      501 */ 
/*      502 */ 
/*      503 */ 
/*      504 */ 
/*      505 */ 
/*      506 */ 
/*      507 */ 
/*      508 */ 
/*      509 */ 
/*      510 */ 
/*      511 */ 
/*      512 */ 
/*      513 */ 
/*      514 */ 
/*      515 */ 
/*      516 */ 
/*      517 */ 
/*      518 */ 
/*      519 */ 
/*      520 */ 
/*      521 */ 
/*      522 */ 
/*      523 */ 
/*      524 */ 
/*      525 */ 
/*      526 */ 
/*      527 */ 
/*      528 */ 
/*      529 */ 
/*      530 */ 
/*      531 */ 
/*      532 */ 
/*      533 */ 
/*      534 */ 
/*      535 */ 
/*      536 */ 
/*      537 */ 
/*      538 */ 
/*      539 */ 
/*      540 */ 
/*      541 */ 
/*      542 */ 
/*      543 */ 
/*      544 */ 
/*      545 */ 
/*      546 */ 
/*      547 */ 
/*      548 */ 
/*      549 */ 
/*      550 */ 
/*      551 */ 
/*      552 */ 
/*      553 */ 
/*      554 */ 
/*      555 */ 
/*      556 */ 
/*      557 */ 
/*      558 */ 
/*      559 */ 
/*      560 */ 
/*      561 */ 
/*      562 */ 
/*      563 */ 
/*      564 */ 
/*      565 */ 
/*      566 */ 
/*      567 */ 
/*      568 */ 
/*      569 */ 
/*      570 */ 
/*      571 */ 
/*      572 */ 
/*      573 */ 
/*      574 */ 
/*      575 */ 
/*      576 */ 
/*      577 */ 
/*      578 */ 
/*      579 */  typedef enum tagS12Pim_StatusType {
/*      580 */  S12PIM_OK
/*      581 */  } S12Pim_StatusType ;
/*      582 */ 
/*      583 */  typedef struct tagS12Pim_ConfigType {
/*      584 */  const uint16 BaseAddr ;
/*      585 */  uint8 Modrr ;
/*      586 */ 
/*      587 */ 
/*      588 */  uint8 DdrT ;
/*      589 */  uint8 PtT ;
/*      590 */  uint8 RdrT ;
/*      591 */  uint8 PerT ;
/*      592 */  uint8 PpsT ;
/*      593 */ 
/*      594 */ 
/*      595 */  uint8 DdrS ;
/*      596 */  uint8 PtS ;
/*      597 */  uint8 RdrS ;
/*      598 */  uint8 PerS ;
/*      599 */  uint8 PpsS ;
/*      600 */  uint8 WomsS ;
/*      601 */ 
/*      602 */ 
/*      603 */  uint8 DdrM ;
/*      604 */  uint8 PtM ;
/*      605 */  uint8 RdrM ;
/*      606 */  uint8 PerM ;
/*      607 */  uint8 PpsM ;
/*      608 */  uint8 WomM ;
/*      609 */ 
/*      610 */ 
/*      611 */  uint8 DdrP ;
/*      612 */  uint8 PtP ;
/*      613 */  uint8 RdrP ;
/*      614 */  uint8 PerP ;
/*      615 */  uint8 PpsP ;
/*      616 */  uint8 PieP ;
/*      617 */ 
/*      618 */ 
/*      619 */  uint8 DdrH ;
/*      620 */  uint8 PtH ;
/*      621 */  uint8 RdrH ;
/*      622 */  uint8 PerH ;
/*      623 */  uint8 PpsH ;
/*      624 */  uint8 PieH ;
/*      625 */ 
/*      626 */ 
/*      627 */  uint8 DdrJ ;
/*      628 */  uint8 PtJ ;
/*      629 */  uint8 RdrJ ;
/*      630 */  uint8 PerJ ;
/*      631 */  uint8 PpsJ ;
/*      632 */  uint8 PieJ ;
/*      633 */ 
/*      634 */  } S12Pim_ConfigType ;
/*      635 */ 
/*      636 */ 
/*      637 */ 
/*      638 */ 
/*      639 */ 
/*      640 */  S12Pim_StatusType S12Pim_Init ( void ) ;
/*      641 */ 
/*      642 */ 
/*      645 */ 
/*      646 */ 
/*      647 */ 
/*      648 */ 
/*      649 */ 

/**** FILE 'Hw_Cfg.h' */

/*       36 */ 
/*       37 */ 

/**** FILE 'S12_Pwm.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Pwm.h' */

/*       27 */ 
/*       28 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */ 
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */ 
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */ 
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */ 
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */ 
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */ 
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */  typedef enum tagS12Pwm_StatusType {
/*      176 */  S12PWM_OK ,
/*      177 */  S12PWM_UNINIT ,
/*      178 */  S12PWM_ID
/*      179 */  } S12Pwm_StatusType ;
/*      180 */ 
/*      181 */ 
/*      182 */  typedef struct tagS12Pwm_ConfigType {
/*      183 */  uint16 BaseAddr ;
/*      184 */ 
/*      185 */  uint8 PwmE ;
/*      186 */  uint8 PwmCtl ;
/*      187 */  uint8 PwmPol ;
/*      188 */  uint8 PwmClk ;
/*      189 */  uint8 PwmPrClk ;
/*      190 */  uint8 PwmCae ;
/*      191 */  uint8 PwmSclA ;
/*      192 */  uint8 PwmSclB ;
/*      193 */ 
/*      194 */  uint8 PwmSdn ;
/*      195 */ 
/*      196 */  uint16 PwmPer01 ;
/*      197 */  uint16 PwmPer23 ;
/*      198 */  uint16 PwmPer45 ;
/*      199 */  uint16 PwmPer67 ;
/*      200 */ 
/*      201 */  uint16 PwmDty01 ;
/*      202 */  uint16 PwmDty23 ;
/*      203 */  uint16 PwmDty45 ;
/*      204 */  uint16 PwmDty67 ;
/*      205 */  } S12Pwm_ConfigType ;
/*      206 */ 
/*      207 */ 
/*      208 */  void S12Pwm_Init ( void ) ;
/*      209 */ 
/*      210 */  void S12Pwm_SetTimebase ( void ) ;
/*      211 */  void S12Pwm_SetDutyCycle ( uint8 ChannelNumber , uint16 DutyCycle ) ;
/*      212 */  void S12Pwm_SetPeriodAndDuty ( uint8 ChannelNumber , uint16 Period , uint16 DutyCycle ) ;
/*      213 */  void S12Pwm_SetOutputToIdle ( uint8 ChannelNumber ) ;
/*      214 */  uint8 S12Pwm_GetOutputState ( uint8 ChannelNumber ) ;
/*      215 */  uint8 S12Pwm_GetCounter8 ( uint8 ChannelNumber ) ;
/*      216 */  uint16 S12Pwm_GetCounter16 ( uint8 ChannelNumber ) ;
/*      217 */  void S12Pwm_ResetCounter ( uint8 ChannelNumber ) ;
/*      218 */ 
/*      219 */ 
/*      222 */ 
/*      223 */ 
/*      224 */ 
/*      225 */ 
/*      226 */ 

/**** FILE 'Hw_Cfg.h' */

/*       37 */ 
/*       38 */ 

/**** FILE 'S12_Sci.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 

/**** FILE 'S12_Crg.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*      201 */ 
/*      202 */ 
/*      203 */ 

/**** FILE 'S12_Sci.h' */

/*       32 */ 
/*       33 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */ 
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */ 
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */ 
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */  typedef enum tagS12Sci_StatusType {
/*      116 */  S12SCI_OK ,
/*      117 */  S12SCI_UNINIT ,
/*      118 */  S12SCI_ID ,
/*      119 */  S12SCI_STATE ,
/*      120 */  S12SCI_VALUE
/*      121 */ 
/*      122 */  } S12Sci_StatusType ;
/*      123 */ 
/*      124 */ 
/*      125 */  typedef enum tagComParityType {
/*      126 */  SCI_PARITY_NONE ,
/*      127 */  SCI_PARITY_ODD ,
/*      128 */  SCI_PARITY_EVEN
/*      129 */  } ComParityType ;
/*      130 */ 
/*      131 */ 
/*      132 */  typedef struct tagS12Sci_VariablesType {
/*      133 */  uint8 * RxBufAddr ;
/*      134 */  uint8 RxBufLength ;
/*      135 */  uint8 RxHead ;
/*      136 */  uint8 volatile RxTail ;
/*      137 */  uint8 LastError ;
/*      138 */ 
/*      139 */  uint8 const * TxBufAddr ;
/*      140 */  uint8 TxBufLength ;
/*      141 */  uint8 volatile TxBufPtr ;
/*      142 */  } S12Sci_VariablesType ;
/*      143 */ 
/*      144 */ 
/*      145 */  typedef void ( * HW_EventNotifyFunc ) ( void ) ;
/*      146 */ 
/*      147 */ 
/*      148 */  typedef struct tagS12Sci_ConfigType {
/*      149 */  uint16 BaseAddr ;
/*      150 */  uint32 BaudRate ;
/*      151 */  ComParityType Parity ;
/*      152 */  uint8 NBits ;
/*      153 */  uint8 * RxBufAddr ;
/*      154 */  uint8 RxBufLength ;
/*      155 */  S12Sci_VariablesType * const Vars ;
/*      156 */  HW_EventNotifyFunc CharReceived ;
/*      157 */  HW_EventNotifyFunc TransmissionCompleted ;
/*      158 */  } S12Sci_ConfigType ;
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */ 
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      175 */ 
/*      176 */  S12Sci_StatusType S12Sci_Init ( S12Sci_ConfigType const * const Cfg ) ;
/*      177 */  S12Sci_StatusType S12Sci_EnableInterrupts ( S12Sci_ConfigType const * const Cfg , boolean ena ) ;
/*      178 */  S12Sci_StatusType S12Sci_SetBaud ( S12Sci_ConfigType const * const Cfg , uint32 baud ) ;
/*      179 */  S12Sci_StatusType S12Sci_SetFormat ( S12Sci_ConfigType const * const Cfg , uint32 baudrate , uint8 parity , uint8 nbits ) ;
/*      180 */  S12Sci_StatusType S12Sci_Get ( S12Sci_ConfigType const * const Cfg , uint8 * ch ) ;
/*      181 */  S12Sci_StatusType S12Sci_Put ( S12Sci_ConfigType const * const Cfg , uint8 ch ) ;
/*      182 */  S12Sci_StatusType S12Sci_PutString ( S12Sci_ConfigType const * const Cfg , uint8 const * str ) ;
/*      183 */  S12Sci_StatusType S12Sci_SendBuffer ( S12Sci_ConfigType const * const Cfg , uint8 const * buf , uint8 len ) ;
/*      184 */  S12Sci_StatusType S12Sci_SendBreak ( S12Sci_ConfigType const * const Cfg ) ;
/*      185 */ 
/*      186 */  S12Sci_StatusType S12Sci_TxReady ( S12Sci_ConfigType const * const Cfg , boolean * ready ) ;
/*      187 */ 
/*      188 */  S12Sci_StatusType S12Sci_SetRxBuffer ( S12Sci_ConfigType const * const Cfg , uint8 * buf , uint8 len ) ;
/*      189 */  S12Sci_StatusType S12Sci_SetTxBuffer ( S12Sci_ConfigType const * const Cfg , uint8 * buf , uint8 len ) ;
/*      190 */ 
/*      191 */  S12Sci_StatusType S12Sci_RxBufIsEmpty ( S12Sci_ConfigType const * const Cfg , boolean * empty ) ;
/*      192 */  S12Sci_StatusType S12Sci_RxBufGetCh ( S12Sci_ConfigType const * const Cfg , uint8 * ch ) ;
/*      193 */  S12Sci_StatusType S12Sci_RxBufFlush ( S12Sci_ConfigType const * const Cfg ) ;
/*      194 */  S12Sci_StatusType S12Sci_TxBufFlush ( S12Sci_ConfigType const * const Cfg ) ;
/*      195 */ 
/*      196 */  uint8 S12Sci_GetLastError ( S12Sci_ConfigType const * const Cfg ) ;
/*      197 */ 
/*      198 */  S12Sci_StatusType S12Sci_Handler ( S12Sci_ConfigType const * const Cfg ) ;
/*      199 */ 
/*      200 */ 
/*      203 */ 
/*      204 */ 
/*      205 */ 
/*      206 */ 
/*      207 */ 

/**** FILE 'Hw_Cfg.h' */

/*       38 */ 
/*       39 */ 

/**** FILE 'S12_Spi.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 

/**** FILE 'S12_Hw.h' */

/*        1 */ 
/*        2 */ 
/*        3 */ 
/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 

/**** FILE 'S12_Spi.h' */

/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */ 
/*       32 */ 
/*       33 */ 
/*       34 */ 
/*       35 */ 
/*       36 */ 
/*       37 */ 
/*       38 */ 
/*       39 */ 
/*       40 */ 
/*       41 */ 
/*       42 */ 
/*       43 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */ 
/*       78 */ 
/*       79 */  typedef struct tagS12Spi_VariablesType {
/*       80 */  uint8 * IOBufAddr ;
/*       81 */  uint8 IOBufLength ;
/*       82 */  uint8 IOBufPtr ;
/*       83 */  } S12Spi_VariablesType ;
/*       84 */ 
/*       85 */ 
/*       86 */  typedef struct tagS12Spi_ConfigType {
/*       87 */  uint16 BaseAddr ;
/*       88 */ 
/*       89 */  uint8 BaudRateDivisor ;
/*       90 */  S12Spi_VariablesType * const Vars ;
/*       91 */  } S12Spi_ConfigType ;
/*       92 */ 
/*       93 */ 
/*       94 */  void S12Spi_Init ( S12Spi_ConfigType const * const Cfg ) ;
/*       95 */  void S12Spi_SetSpeed ( S12Spi_ConfigType const * const Cfg , uint8 prescaler ) ;
/*       96 */  void S12Spi_SetFormat ( S12Spi_ConfigType const * const Cfg , boolean cpol , boolean cpha , boolean lsbfe ) ;
/*       97 */ 
/*       98 */  uint8 S12Spi_IOByte ( S12Spi_ConfigType const * const Cfg , uint8 data ) ;
/*       99 */ 
/*      100 */  void S12Spi_IOBuffer ( S12Spi_ConfigType const * const Cfg , uint8 * data , uint8 len , boolean use_interrupt ) ;
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */ 
/*      105 */ 

/**** FILE 'Hw_Cfg.h' */

/*       39 */ 
/*       40 */ 
/*       44 */ 
/*       45 */ 
/*       46 */ 
/*       47 */ 
/*       48 */ 
/*       49 */ 
/*       50 */ 
/*       51 */ 
/*       52 */ 
/*       53 */ 
/*       54 */ 
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */  extern const S12Atd_ConfigType S12Atd_Configuration [ 2 ] ;
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */  extern const S12Bkp_ConfigType BKP ;
/*       66 */ 
/*       67 */ 
/*       68 */ 
/*       69 */ 
/*       70 */ 
/*       71 */ 
/*       72 */ 
/*       73 */ 
/*       74 */ 
/*       75 */ 
/*       76 */ 
/*       77 */  extern const S12Can_ConfigType S12Can_Configuration [ 5 ] ;
/*       78 */ 
/*       79 */ 
/*       80 */ 
/*       81 */ 
/*       82 */ 
/*       83 */ 
/*       84 */ 
/*       85 */ 
/*       86 */ 
/*       87 */ 
/*       88 */ 
/*       89 */ 
/*       90 */  extern const S12Crg_ConfigType CRG ;
/*       91 */ 
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */ 
/*       96 */ 
/*       97 */  extern const S12Ect_ConfigType ECT ;
/*       98 */ 
/*       99 */ 
/*      100 */ 
/*      101 */ 
/*      102 */ 
/*      103 */ 
/*      104 */  extern const S12Fls_ConfigType FLS ;
/*      105 */ 
/*      106 */ 
/*      107 */ 
/*      108 */ 
/*      109 */ 
/*      110 */ 
/*      111 */  extern const S12Iic_ConfigType IIC0 ;
/*      112 */ 
/*      113 */ 
/*      114 */ 
/*      115 */ 
/*      116 */ 
/*      117 */  extern const S12Int_ConfigType INT ;
/*      118 */ 
/*      119 */ 
/*      120 */ 
/*      121 */ 
/*      122 */ 
/*      123 */  extern const S12Mebi_ConfigType MEBI ;
/*      124 */ 
/*      125 */ 
/*      126 */ 
/*      127 */ 
/*      128 */ 
/*      129 */ 
/*      130 */  extern const S12Mmc_ConfigType MMC ;
/*      131 */ 
/*      132 */ 
/*      133 */ 
/*      134 */ 
/*      135 */ 
/*      136 */ 
/*      137 */  extern const S12Pim_ConfigType PIM ;
/*      138 */ 
/*      139 */ 
/*      140 */ 
/*      141 */ 
/*      142 */ 
/*      143 */  extern const S12Pwm_ConfigType PWM ;
/*      144 */ 
/*      145 */ 
/*      146 */ 
/*      147 */ 
/*      148 */ 
/*      149 */ 
/*      150 */ 
/*      151 */ 
/*      152 */ 
/*      153 */ 
/*      154 */ 
/*      155 */ 
/*      156 */ 
/*      157 */  extern const S12Sci_ConfigType S12Sci_Configuration [ 2 ] ;
/*      158 */ 
/*      159 */ 
/*      160 */ 
/*      161 */ 
/*      162 */ 
/*      163 */ 
/*      164 */ 
/*      165 */ 
/*      166 */ 
/*      167 */ 
/*      168 */ 
/*      169 */ 
/*      170 */ 
/*      171 */  extern const S12Spi_ConfigType S12Spi_Configuration [ 3 ] ;
/*      172 */ 
/*      173 */ 
/*      174 */ 
/*      177 */ 
/*      178 */ 
/*      179 */ 
/*      180 */ 
/*      181 */ 

/**** FILE 'C:\projekte\csProjects\trunk\drivers\src\cpu12\S12_Can.c' */

/*        4 */ 
/*        5 */ 
/*        6 */ 
/*        7 */ 
/*        8 */ 
/*        9 */ 
/*       10 */ 
/*       11 */ 
/*       12 */ 
/*       13 */ 
/*       14 */ 
/*       15 */ 
/*       16 */ 
/*       17 */ 
/*       18 */ 
/*       19 */ 
/*       20 */ 
/*       21 */ 
/*       22 */ 
/*       23 */ 
/*       24 */ 
/*       25 */ 
/*       26 */ 
/*       27 */ 
/*       28 */ 
/*       29 */ 
/*       30 */ 
/*       31 */  enum {
/*       32 */  CAN_SPEED_1000 ,
/*       33 */  CAN_SPEED_800 ,
/*       34 */  CAN_SPEED_500 ,
/*       35 */  CAN_SPEED_250 ,
/*       36 */  CAN_SPEED_125 ,
/*       37 */  CAN_SPEED_83 ,
/*       38 */  CAN_SPEED_62 ,
/*       39 */  CAN_SPEED_50 ,
/*       40 */  CAN_SPEED_20
/*       41 */  } ;
/*       42 */ 
/*       43 */ 
/*       44 */  static const S12Can_BusTimingType Can_SpeedTable [ ] = {
/*       45 */  { 0x01 , 0x14 } ,
/*       46 */  { 0x01 , 0x16 } ,
/*       47 */  { 0x01 , 0x1C } ,
/*       48 */  { 0x03 , 0x1C } ,
/*       49 */  { 0x07 , 0x1C } ,
/*       50 */  { 0x0B , 0x1C } ,
/*       51 */  { 0x0F , 0x1C } ,
/*       52 */  { 0x13 , 0x1C } ,
/*       53 */  { 0x31 , 0x1C } ,
/*       54 */  } ;
/*       55 */ 
/*       56 */ 
/*       57 */ 
/*       58 */ 
/*       59 */ 
/*       60 */ 
/*       61 */ 
/*       62 */ 
/*       63 */ 
/*       64 */ 
/*       65 */ 
/*       66 */ 
/*       67 */  S12Can_StatusType S12Can_Init ( S12Can_ConfigType const * const Cfg , uint8 btr0 , uint8 btr1 )
/*       68 */  {
/*       69 */  S12Can_StatusType ret ;
/*       70 */ 
/*       71 */  ret = S12Can_InitializationMode ( Cfg , ( ( boolean ) 1 ) ) ;
/*       72 */  if ( ret != S12CAN_OK ) {
/*       73 */  return ret ;
/*       74 */  }
/*       75 */ 
/*       76 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) = ( ( uint8 ) 0x80 ) | ( ( uint8 ) 0x20 ) | ( ( uint8 ) 0x04 ) ;
/*       77 */ 
/*       78 */  ( void ) S12Can_SetBusTiming ( Cfg , btr0 , btr1 ) ;
/*       79 */  ( void ) S12Can_SetFilter ( Cfg , & Cfg -> Filter ) ;
/*       80 */ 
/*       81 */  ret = S12Can_InitializationMode ( Cfg , ( ( boolean ) 0 ) ) ;
/*       82 */  if ( ret != S12CAN_OK ) {
/*       83 */  return ret ;
/*       84 */  }
/*       85 */ 
/*       86 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) = ( ( ( uint8 ) 0x20 ) | ( ( uint8 ) 0x08 ) | ( ( uint8 ) 0x04 ) ) ;
/*       87 */ 
/*       88 */  ( void ) S12Can_EnableInterrupts ( Cfg , ( ( boolean ) 1 ) ) ;
/*       89 */ 
/*       90 */  return S12CAN_OK ;
/*       91 */  }
/*       92 */ 
/*       93 */ 
/*       94 */ 
/*       95 */  S12Can_StatusType S12Can_EnableInterrupts ( S12Can_ConfigType const * const Cfg , boolean enable )
/*       96 */  {
/*       97 */  boolean initializing ;
/*       98 */ 
/*       99 */  ( void ) S12Can_Initializing ( Cfg , & initializing ) ;
/*      100 */  if ( initializing ) {
/*      101 */  return S12CAN_STATE ;
/*      102 */  }
/*      103 */ 
/*      104 */  if ( enable ) {
/*      105 */ 
/*      106 */ 
/*      107 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 5 ) ) ) ) ) ) = ( ( uint8 ) 0x80 ) | ( ( uint8 ) 0x40 ) | ( ( uint8 ) 0x10 ) | ( ( uint8 ) 0x20 ) | ( ( uint8 ) 0x04 ) | ( ( uint8 ) 0x08 ) | ( ( uint8 ) 0x02 ) | ( ( uint8 ) 0x01 ) ;
/*      108 */ 
/*      109 */  } else {
/*      110 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 5 ) ) ) ) ) ) = ( uint8 ) 0x00 ;
/*      111 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 7 ) ) ) ) ) ) = ( uint8 ) 0x00 ;
/*      112 */  }
/*      113 */ 
/*      114 */  return S12CAN_OK ;
/*      115 */  }
/*      116 */ 
/*      117 */  S12Can_StatusType S12Can_Sleeping ( S12Can_ConfigType const * const Cfg , boolean * sleeping )
/*      118 */  {
/*      119 */  * sleeping = ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x02 ) ) == ( ( uint8 ) 0x02 ) ) ;
/*      120 */ 
/*      121 */  return S12CAN_OK ;
/*      122 */  }
/*      123 */ 
/*      124 */  S12Can_StatusType S12Can_Initializing ( S12Can_ConfigType const * const Cfg , boolean * initializing )
/*      125 */  {
/*      126 */  * initializing = ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x01 ) ) == ( ( uint8 ) 0x01 ) ) ;
/*      127 */ 
/*      128 */  return S12CAN_OK ;
/*      129 */  }
/*      130 */ 
/*      131 */  S12Can_StatusType S12Can_SetBusTiming ( S12Can_ConfigType const * const Cfg , uint8 btr0 , uint8 btr1 )
/*      132 */  {
/*      133 */  boolean initializing ;
/*      134 */ 
/*      135 */  ( void ) S12Can_Initializing ( Cfg , & initializing ) ;
/*      136 */  if ( ! initializing ) {
/*      137 */  return S12CAN_STATE ;
/*      138 */  }
/*      139 */ 
/*      140 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 2 ) ) ) ) ) ) = btr0 ;
/*      141 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 3 ) ) ) ) ) ) = btr1 ;
/*      142 */ 
/*      143 */  return S12CAN_OK ;
/*      144 */  }
/*      145 */ 
/*      146 */  S12Can_StatusType S12Can_SetFilter ( S12Can_ConfigType const * const Cfg , const S12Can_FilterType * Filter )
/*      147 */  {
/*      148 */  boolean initializing ;
/*      149 */ 
/*      150 */  ( void ) S12Can_Initializing ( Cfg , & initializing ) ;
/*      151 */  if ( ! initializing ) {
/*      152 */  return S12CAN_STATE ;
/*      153 */  }
/*      154 */ 
/*      155 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x0b ) ) ) ) ) ) = Filter -> FilterMode ;
/*      156 */ 
/*      157 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x10 ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 0 ] ;
/*      158 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x11 ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 1 ] ;
/*      159 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x12 ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 2 ] ;
/*      160 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x13 ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 3 ] ;
/*      161 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x18 ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 4 ] ;
/*      162 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x19 ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 5 ] ;
/*      163 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x1a ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 6 ] ;
/*      164 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x1b ) ) ) ) ) ) = Filter -> IdentifierAcceptance [ 7 ] ;
/*      165 */ 
/*      166 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x14 ) ) ) ) ) ) = Filter -> IdentifierMask [ 0 ] ;
/*      167 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x15 ) ) ) ) ) ) = Filter -> IdentifierMask [ 1 ] ;
/*      168 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x16 ) ) ) ) ) ) = Filter -> IdentifierMask [ 2 ] ;
/*      169 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x17 ) ) ) ) ) ) = Filter -> IdentifierMask [ 3 ] ;
/*      170 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x1c ) ) ) ) ) ) = Filter -> IdentifierMask [ 4 ] ;
/*      171 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x1d ) ) ) ) ) ) = Filter -> IdentifierMask [ 5 ] ;
/*      172 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x1e ) ) ) ) ) ) = Filter -> IdentifierMask [ 6 ] ;
/*      173 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x1f ) ) ) ) ) ) = Filter -> IdentifierMask [ 7 ] ;
/*      174 */ 
/*      175 */  return S12CAN_OK ;
/*      176 */  }
/*      177 */ 
/*      178 */  S12Can_StatusType S12Can_Stop ( S12Can_ConfigType const * const Cfg )
/*      179 */  {
/*      180 */ 
/*      181 */  ( void ) S12Can_InitializationMode ( Cfg , ( ( boolean ) 1 ) ) ;
/*      182 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) &= ~ ( ( uint8 ) 0x80 ) ;
/*      183 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 5 ) ) ) ) ) ) = ( uint8 ) 0x00 ;
/*      184 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 7 ) ) ) ) ) ) = ( uint8 ) 0x00 ;
/*      185 */ 
/*      186 */  return S12CAN_OK ;
/*      187 */  }
/*      188 */ 
/*      189 */ 
/*      190 */  S12Can_StatusType S12Can_InitializationMode ( S12Can_ConfigType const * const Cfg , boolean enable )
/*      191 */  {
/*      192 */ 
/*      193 */ 
/*      194 */ 
/*      195 */ 
/*      196 */ 
/*      197 */  if ( enable ) {
/*      198 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) |= ( ( uint8 ) 0x01 ) ;
/*      199 */  while ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x01 ) ) == ( ( uint8 ) 0x01 ) ) ) do { } while ( 0 ) ;
/*      200 */  } else {
/*      201 */  if ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) & ( ( uint8 ) 0x01 ) ) && ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x01 ) ) ) ) {
/*      202 */  return S12CAN_STATE ;
/*      203 */  }
/*      204 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) &= ~ ( ( uint8 ) 0x01 ) ;
/*      205 */  while ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x01 ) ) != ( ( uint8 ) 0x01 ) ) ) do { } while ( 0 ) ;
/*      206 */  ( void ) S12Can_WaitSynch ( Cfg ) ;
/*      207 */  }
/*      208 */  return S12CAN_OK ;
/*      209 */  }
/*      210 */ 
/*      211 */  S12Can_StatusType S12Can_SleepMode ( S12Can_ConfigType const * const Cfg , boolean enable )
/*      212 */  {
/*      213 */  if ( enable ) {
/*      214 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) |= ( ( uint8 ) 0x02 ) ;
/*      215 */  while ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x02 ) ) == ( ( uint8 ) 0x02 ) ) ) do { } while ( 0 )
/*      216 */ 
/*      217 */  } else {
/*      218 */  if ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) & ( ( uint8 ) 0x02 ) ) && ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x02 ) ) ) ) {
/*      219 */  return S12CAN_STATE ;
/*      220 */  }
/*      221 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) &= ~ ( ( uint8 ) 0x02 ) ;
/*      222 */  while ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 1 ) ) ) ) ) ) & ( ( uint8 ) 0x02 ) ) != ( ( uint8 ) 0x02 ) ) ) do { } while ( 0 ) ;
/*      223 */  ( void ) S12Can_WaitSynch ( Cfg ) ;
/*      224 */  }
/*      225 */  return S12CAN_OK ;
/*      226 */  }
/*      227 */ 
/*      228 */ 
/*      229 */  S12Can_StatusType S12Can_CancelMessage ( S12Can_ConfigType const * const Cfg , uint8 Number )
/*      230 */  {
/*      231 */  uint8 Mask ;
/*      232 */  boolean initializing ;
/*      233 */ 
/*      234 */  ( void ) S12Can_Initializing ( Cfg , & initializing ) ;
/*      235 */  if ( initializing ) {
/*      236 */  return S12CAN_STATE ;
/*      237 */  }
/*      238 */ 
/*      239 */  if ( Number > ( uint8 ) 2 ) {
/*      240 */  return S12CAN_VALUE ;
/*      241 */  }
/*      242 */ 
/*      243 */  Mask = ( uint8 ) 1 << Number ;
/*      244 */ 
/*      245 */  if ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 8 ) ) ) ) ) ) & Mask ) == Mask ) {
/*      246 */  return S12CAN_STATE ;
/*      247 */  }
/*      248 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 8 ) ) ) ) ) ) |= Mask ;
/*      249 */ 
/*      250 */  while ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 9 ) ) ) ) ) ) & Mask ) == Mask ) ) do { } while ( 0 ) ;
/*      251 */ 
/*      252 */ 
/*      253 */  return S12CAN_OK ;
/*      254 */  }
/*      255 */ 
/*      256 */  S12Can_StatusType S12Can_Ready ( S12Can_ConfigType const * const Cfg , boolean * ready )
/*      257 */  {
/*      258 */  * ready = ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 6 ) ) ) ) ) ) & ( ( ( uint8 ) 0x01 ) | ( ( uint8 ) 0x02 ) | ( ( uint8 ) 0x04 ) ) != ( uint8 ) 0x00 ) ;
/*      259 */ 
/*      260 */  return S12CAN_OK ;
/*      261 */  }
/*      262 */ 
/*      263 */  S12Can_StatusType S12Can_RxD ( S12Can_ConfigType const * const Cfg , boolean * rxd )
/*      264 */  {
/*      265 */  * rxd = ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) & ( ( uint8 ) 0x01 ) ) == ( ( uint8 ) 0x01 ) ) ;
/*      266 */ 
/*      267 */  return S12CAN_OK ;
/*      268 */  }
/*      269 */ 
/*      270 */  S12Can_StatusType S12Can_Transmit ( S12Can_ConfigType const * const Cfg , const S12Can_MessageType * Msg , uint8 priority , uint8 * SentOnBuffer )
/*      271 */  {
/*      272 */  S12Can_BufferType * TxFG ;
/*      273 */  uint8 number_of_buffer ;
/*      274 */  boolean ready ;
/*      275 */  boolean initializing ;
/*      276 */ 
/*      277 */  ( void ) S12Can_Initializing ( Cfg , & initializing ) ;
/*      278 */  if ( initializing ) {
/*      279 */  return S12CAN_STATE ;
/*      280 */  }
/*      281 */ 
/*      282 */  if ( Msg -> DLR > ( ( uint8 ) 0x08 ) ) {
/*      283 */  return S12CAN_VALUE ;
/*      284 */  }
/*      285 */ 
/*      286 */ 
/*      287 */  ready = ( ( boolean ) 0 ) ;
/*      288 */  while ( ! ready ) {
/*      289 */  ( void ) S12Can_Ready ( Cfg , & ready ) ;
/*      290 */  }
/*      291 */ 
/*      292 */  TxFG = ( S12Can_BufferType * ) * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x30 ) ) ) ) ) ) ;
/*      293 */ 
/*      294 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x0a ) ) ) ) ) ) = * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 6 ) ) ) ) ) ) ;
/*      295 */  number_of_buffer = * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x0a ) ) ) ) ) ) ;
/*      296 */ 
/*      297 */  TxFG -> DLR = Msg -> DLR ;
/*      298 */  TxFG -> TBPR = priority ;
/*      299 */ 
/*      300 */ 
/*      301 */  if ( Msg -> ExtendedID ) {
/*      302 */ 
/*      303 */  if ( Msg -> RTR ) {
/*      304 */  TxFG -> IDR1 |= ( uint8 ) 0x10 ;
/*      305 */  }
/*      306 */  } else {
/*      307 */  TxFG -> IDR0 = ( uint8 ) ( Msg -> ID & ( uint32 ) 0x07FF ) >> 3 ;
/*      308 */  TxFG -> IDR1 = ( uint8 ) ( Msg -> ID & ( uint32 ) 0x0007 ) << 5 ;
/*      309 */  if ( Msg -> RTR ) {
/*      310 */  TxFG -> IDR3 |= ( uint8 ) 0x01 ;
/*      311 */  }
/*      312 */  }
/*      313 */ 
/*      314 */  if ( ( Msg -> DLR ) && ( ! Msg -> RTR ) ) {
/*      315 */  Utl_MemCopy ( ( void * ) & TxFG -> DSR0 , ( void * ) Msg -> SDU , ( uint16 ) Msg -> DLR ) ;
/*      316 */  }
/*      317 */ 
/*      318 */  if ( SentOnBuffer != ( uint8 ) 0 ) {
/*      319 */  * SentOnBuffer = number_of_buffer ;
/*      320 */  }
/*      321 */ 
/*      322 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 6 ) ) ) ) ) ) = number_of_buffer ;
/*      323 */ 
/*      324 */  return S12CAN_OK ;
/*      325 */  }
/*      326 */ 
/*      327 */  S12Can_StatusType S12Can_CopyRxBuffer ( S12Can_ConfigType const * const Cfg , S12Can_MessageType * Msg )
/*      328 */  {
/*      329 */  S12Can_BufferType * RxFG ;
/*      330 */  uint32 ID ;
/*      331 */  boolean ExtendedID ;
/*      332 */  boolean RTR ;
/*      333 */  boolean initializing ;
/*      334 */ 
/*      335 */  ( void ) S12Can_Initializing ( Cfg , & initializing ) ;
/*      336 */  if ( initializing ) {
/*      337 */  return S12CAN_STATE ;
/*      338 */  }
/*      339 */ 
/*      340 */  if ( ! ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) & ( ( uint8 ) 0x01 ) ) ) {
/*      341 */  return S12CAN_STATE ;
/*      342 */  }
/*      343 */ 
/*      344 */  RxFG = ( S12Can_BufferType * ) * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x20 ) ) ) ) ) ) ;
/*      345 */  Msg -> DLR = RxFG -> DLR ;
/*      346 */ 
/*      347 */  ExtendedID = ( ( RxFG -> IDR1 & ( ( uint8 ) 0x08 ) ) == ( ( uint8 ) 0x08 ) ) ;
/*      348 */  Msg -> ExtendedID = ExtendedID ;
/*      349 */ 
/*      350 */  if ( ExtendedID ) {
/*      351 */  RTR = ( ( RxFG -> IDR3 & ( uint8 ) 0x01 ) == ( uint8 ) 0x01 ) ;
/*      352 */  ID = ( ( ( uint32 ) RxFG -> IDR0 ) << 21 ) | ( ( ( uint32 ) ( RxFG -> IDR1 & 0xe0 ) ) << 18 ) |
/*      353 */  ( ( ( uint32 ) ( RxFG -> IDR1 & 0x07 ) ) << 15 ) | ( ( ( uint32 ) RxFG -> IDR2 ) << 7 ) |
/*      354 */  ( ( ( uint32 ) ( RxFG -> IDR3 & 0xfe ) ) >> 1 ) ;
/*      355 */ 
/*      356 */  } else {
/*      357 */  RTR = ( ( RxFG -> IDR1 & ( uint8 ) 0x10 ) == ( uint8 ) 0x10 ) ;
/*      358 */  ID = ( uint32 ) ( RxFG -> IDR0 << ( uint8 ) 3 ) | ( RxFG -> IDR1 >> ( uint8 ) 5 ) ;
/*      359 */  }
/*      360 */ 
/*      361 */  Msg -> ID = ID ;
/*      362 */  Msg -> RTR = RTR ;
/*      363 */ 
/*      364 */  if ( ! RTR && ( Msg -> DLR ) ) {
/*      365 */  Utl_MemCopy ( ( void * ) Msg -> SDU , ( void * ) & RxFG -> DSR0 , ( uint16 ) Msg -> DLR ) ;
/*      366 */  }
/*      367 */ 
/*      368 */ 
/*      369 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) = ( ( uint8 ) 0x01 ) ;
/*      370 */ 
/*      371 */  return S12CAN_OK ;
/*      372 */  }
/*      373 */ 
/*      374 */  S12Can_StatusType S12Can_GetErrorCounters ( S12Can_ConfigType const * const Cfg , uint8 * RxErrors , uint8 * TxErrors )
/*      375 */  {
/*      376 */ 
/*      377 */  * RxErrors = * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x0e ) ) ) ) ) ) ;
/*      378 */  * TxErrors = * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0x0f ) ) ) ) ) ) ;
/*      379 */ 
/*      380 */  return S12CAN_OK ;
/*      381 */  }
/*      382 */ 
/*      383 */  S12Can_StatusType S12Can_WaitSynch ( S12Can_ConfigType const * const Cfg )
/*      384 */  {
/*      385 */  while ( ! ( ( * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 0 ) ) ) ) ) ) & ( ( uint8 ) 0x10 ) ) == ( ( uint8 ) 0x10 ) ) ) do { } while ( 0 ) ;
/*      386 */ 
/*      387 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( Cfg -> BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) = ( ( uint8 ) 0x80 ) | ( ( uint8 ) 0x40 ) | ( ( uint8 ) 0x02 ) | ( ( uint8 ) 0x01 ) ;
/*      388 */ 
/*      389 */  return S12CAN_OK ;
/*      390 */  }
/*      391 */ 
/*      392 */ 
/*      393 */ 
/*      394 */ 
/*      395 */ 
/*      396 */ 
/*      397 */  __interrupt void CAN0TxVector ( void )
/*      398 */  {
/*      399 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( & S12Can_Configuration [ 0 ] . BaseAddr ) ) + ( ( ( ( uint8 ) 6 ) ) ) ) ) ) = ( uint8 ) ( ( uint8 ) 0x04 ) | ( ( uint8 ) 0x02 ) | ( ( uint8 ) 0x01 ) ;
/*      400 */  }
/*      401 */ 
/*      402 */  S12Can_MessageType Msg ;
/*      403 */ 
/*      404 */  __interrupt void CAN0RxVector ( void )
/*      405 */  {
/*      406 */ 
/*      407 */  S12Can_StatusType ret ;
/*      408 */  ret = S12Can_CopyRxBuffer ( & S12Can_Configuration [ 0 ] , & Msg ) ;
/*      409 */ 
/*      410 */ 
/*      411 */ 
/*      412 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( & S12Can_Configuration [ 0 ] . BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) = ( ( uint8 ) 0x01 ) ;
/*      413 */  }
/*      414 */ 
/*      415 */  __interrupt void CAN0ErrorVector ( void )
/*      416 */  {
/*      417 */  uint8 rflags ;
/*      418 */  uint8 state ;
/*      419 */ 
/*      420 */  rflags = * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( & S12Can_Configuration [ 0 ] . BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) ;
/*      421 */ 
/*      422 */  if ( ( rflags & ( ( uint8 ) 0x40 ) ) == ( ( uint8 ) 0x40 ) ) {
/*      423 */  state = rflags & ( ( ( uint8 ) 0x20 ) | ( ( uint8 ) 0x10 ) | ( ( uint8 ) 0x08 ) | ( ( uint8 ) 0x04 ) ) ;
/*      424 */ 
/*      425 */  if ( ( ( state & ( ( uint8 ) 0x30 ) ) == ( ( uint8 ) 0x30 ) ) || ( ( state & ( ( uint8 ) 0x0C ) ) == ( ( uint8 ) 0x0C ) ) ) {
/*      426 */ 
/*      427 */  }
/*      428 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( & S12Can_Configuration [ 0 ] . BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) = ( ( uint8 ) 0x40 ) ;
/*      429 */  } else if ( ( rflags & ( ( uint8 ) 0x02 ) ) == ( ( uint8 ) 0x02 ) ) {
/*      430 */ 
/*      431 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( & S12Can_Configuration [ 0 ] . BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) = ( ( uint8 ) 0x02 ) ;
/*      432 */  }
/*      433 */  }
/*      434 */ 
/*      435 */  __interrupt void CAN0WakupVector ( void )
/*      436 */  {
/*      437 */  * ( volatile uint8 * ) ( ( ( ( uint8 * ) ( ( & S12Can_Configuration [ 0 ] . BaseAddr ) ) + ( ( ( ( uint8 ) 4 ) ) ) ) ) ) = ( ( uint8 ) 0x80 ) ;
/*      438 */  }
/*      439 */ 
/*      440 */ 
/*      441 */ 