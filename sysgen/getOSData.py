
import sys,os,re

##
## todo: Allgemeine Funktionen um Deklarationen/Definitionen
##       aus (C-) Sourcecode zu extrahieren!!!
##

def getServiceIDs(lines):
    ServiceIDs=re.compile(r""" typedef\s*enum\s*tagOSServiceIdType\s*\{
    (?P<data>.*) \}\s*Os_ServiceIdType;
    """,re.VERBOSE|re.DOTALL|re.MULTILINE)

    match=ServiceIDs.search(lines)

    serviceIDs=[]

    for line in match.group('data').splitlines():
        ma=re.match(
            r"""\s*(OS|COM)ServiceId_(?P<key>[a-zA-Z_]*)
            \s*=?\s*(?P<value>[0-9]*) \s*""", line,re.VERBOSE
        )
        if ma:
            key,value=ma.group('key'),ma.group('value')
            serviceIDs.append((key,value))

    currentValue=0
    for num,serviceID in enumerate(serviceIDs):
        key,value=serviceID
        if value=='':
            value=currentValue
            currentValue+=1
        else:
            value=int(value)
            currentValue=value+1
        serviceIDs[num]=(key,value)

    return serviceIDs


def getStatusTypes(lines,consts):
    StatusTypes=re.compile(r"""typedef\s*enum\s*tagStatusType\s*\{
    (?P<data>.*)\s*}\s*StatusType;
    """,re.VERBOSE|re.DOTALL|re.MULTILINE)

    match=StatusTypes.search(lines)

    statusTypes=[]

    for line in match.group('data').splitlines():
        ma=re.match(
            r"""\s*(?P<key>[A-Z_]+)
            \s*=?\s*(?P<value>([0-9]|[A-Z_])*) \s*""", line,re.VERBOSE
        )
        if ma:
            key,value=ma.group('key'),ma.group('value')
            statusTypes.append((key,value))

    currentValue=0
    for num,statusType in enumerate(statusTypes):
        key,value=statusType
        if value=='':
            value=currentValue
            currentValue+=1
        else:
            if not value.isdigit() and value.startswith('E_'):
                value=consts[value[2:]]
            value=int(value)
            currentValue=value+1
        statusTypes[num]=(key,value)

    return statusTypes

###
###
###
def getTaskStates(lines):
    ServiceIDs=re.compile(r""" typedef\s*enum\s*tagTaskStateType\s*\{
    (?P<data>.*) \}\s*TaskStateType;
    """,re.VERBOSE|re.DOTALL|re.MULTILINE)

    match=ServiceIDs.search(lines)

    taskStates=[]

    for line in match.group('data').splitlines():
        ma=re.match(
            r"""\s*(?P<key>[a-zA-Z_]+)
            \s*=?\s*(?P<value>[0-9]*) \s*""", line,re.VERBOSE
        )
        if ma:
            key,value=ma.group('key'),ma.group('value')
            taskStates.append((key,value))

    currentValue=0
    for num,taskState in enumerate(taskStates):
        key,value=taskState
        if value=='':
            value=currentValue
            currentValue+=1
        else:
            value=int(value)
            currentValue=value+1
        taskStates[num]=(key,value)

    return taskStates
###
###
###

def getServiceConsts(lines):
    consts=re.findall(r"\s*#define E_(?P<key>[A-Z_]+)\s*\(\(uint8\)(?P<value>\d+)\)",lines,re.MULTILINE)
    return dict([(c[0],int(c[1])) for c in consts])

def main():
    outf=file("ORTICfg.py","w")
    
    lines=file("Os_Error.h").read()
    serviceIDs=getServiceIDs(lines)
    
    
    print >> outf, "##"
    print >> outf, "## THIS FILE IS AUTOMATICALLY GENERATED - DO NOT MODIFY !!!"
    print >> outf, "##\n\n"
    
    print >> outf, "SERVICE_IDS=%s\n" % serviceIDs
    #print >> outf,"print SERVICE_IDS"
    
    lines=file("Os_Types.h").read()
    consts=getServiceConsts(lines)
    types=getStatusTypes(lines,consts)
    
    states=getTaskStates(lines)
    
    print >> outf, "STATUS_TYPES=%s\n" % types
    
    print >> outf, "TASK_STATES=%s\n" % states
    #print >> outf,"print STATUS_TYPES"
    
    outf.close()

if __name__=='__main__':
    main()
