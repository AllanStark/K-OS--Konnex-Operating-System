/*
**
**  !!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT !!!
**
**
**  GENERATED WITH  : '${sys.argv[0]}', Part of k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
**  VERSION:        : ${$info.version}
**  DATE            : ${time.ctime()}
**
*/


/*
**
**  Information Section.
**
*/
VERSION {
    KOIL        = "$info.koilVersion";
    OSSEMANTICS = "ORTI", "$info.osekVersion";
};


/*
**
**  Implementation Section.
**
*/
#slurp
#set $line=None
#set $num=0
#errorCatcher Echo
IMPLEMENTATION ${info.vendor}_${info.version}_ORTI {
    OS {
        TOTRACE ENUM "uint8" [
$enumerateServices()
        ] SERVICETRACE, "OS Service Watches";

        ENUM "uint8" [
$enumeratePriorities()
        ] RUNNINGTASKPRIORITY, "Priority of running Task";

        ENUM "uint8" [
$enumerateISR2s()
        ] RUNNINGISR2, "Running ISR of category 2";

        ENUM "uint8" [
$enumerateStatusCodes()
        ] LASTERROR, "Last OSEK error";
        
        ENUM [
$enumerateTasks()
        ] RUNNINGTASK, "Running Task Identification";

        ENUM "uint8" [
            "DEFAULT APPMODE" = 0
        ] CURRENTAPPMODE, "Current application mode";
    }, "OS";

    TASK {
        ENUM "uint8" [
$enumeratePriorities()
        ] PRIORITY, "Actual Priority";
        ENUM "uint8" [
            "SUSPENDED" = 0,
            "READY"     = 1,
            "RUNNING"   = 2,
            "WAITING"   = 3
        ] STATE, "Current Task State";
        ENUM "uint8 *" [
#for $num,$task in $enumerate($app.tasks,0)
            "Stack${num}" : ${task.name}_Stack = "&(${task.name}_Stack[0])"#slurp
#if $num<len($app.tasks)-1
,
#else

#end if
#end for
        ] STACK, "Task Stack";
        ENUM "uint8 *" [
#for $num,$task in $enumerate($app.tasks,0)
            "CONTEXT_${task.name}" : CONTEXT_${task.name} = $num#slurp
#if $num<len($app.tasks)-1
,
#else

#end if
#end for
        ] CONTEXT, "Task Context";
        CTYPE "uint8" CURRENTACTIVATIONS, "Current Activations";
        STRING vs_Base_Priority, "Configured Base Priority";
        STRING vs_Schedule, "Schedule";
        STRING vs_Task_Type, "Task Type";
        CTYPE "uint8" vs_Events_Set, "Events Set";
        CTYPE "uint8" vs_Events_WaitingFor, "Events Waiting for";
    }, "Tasks";

    ALARM {
        CTYPE "uint16" ALARMTIME, "Alarm Time"; /* Alarmtime_t oder so!!! */
        CTYPE "uint16" CYCLETIME, "Cycle Time";
        ENUM [
            "STOPPED" = 0,
            "RUNNING" = 1
        ] STATE, "Alarm State";
        STRING ACTION, "associated Action";
        STRING COUNTER, "associated Counter";
    }, "Alarms";

    RESOURCE {
        ENUM "uint8" [
            "UNLOCKED"=0,
            "LOCKED"=1
        ] STATE, "Resource State";
        ENUM "uint8" [
#for $num,$task in $enumerate($app.tasks,1)
            "$task.name"=$num#slurp
#if $num<len($app.tasks)
,
#else

#end if
#end for
        ] LOCKER, "Resource Locker";
        STRING PRIORITY, "Ceiling priority";
    }, "Resources";

    CONTEXT {
#for $name,$type_,_ in $info.context
        CTYPE "$type_" _CPU_$name, "CPU Register $name";
#end for
## todo: Task-Stackpointer!? (last used, next avail)
        CYTPE "unsigned char" VALID;
    }, "Task Context";
    STACK {
        CTYPE "uint16" SIZE, "Stacksize in Bytes";
        CTYPE "uint16*" BASEADDRESS, "Base Address";    /* AddressType oder so!!! */
        STRING STACKDIRECTION, "Stack Direction";
        CTYPE "uint8" FILLPATTERN, "Stack Fill Pattern";
    }, "Stacks";
}; /* END OF IMPLEMENTATION */


/*
**
**  Information Section.
**
*/
OS ${info.vendor}_${info.version}_arch {
    RUNNINGTASK         = "$osVars.runningTask";
    RUNNINGTASKPRIORITY = "$osVars.runningTaskPriority";
    RUNNINGISR2         = "$osVars.isrID";
    SERVICETRACE        = "$osVars.serviceID";
    LASTERROR           = "$osVars.lastError";
    CURRENTAPPMODE      = "$osVars.appMode";
};

#for $num,$task in $enumerate($app.tasks,1)
TASK $task.name {
    PRIORITY            = "(OS_TCB[$num].CurrentPriority)";
    STATE               = "(OS_TCB[$num].State)";
    STACK               = "&(${task.name}_Stack[0])";
    CURRENTACTIVATIONS  = "(OS_TCB[$num].Activations)";
    CONTEXT             = "CONTEXT_$task.name";
    vs_Base_Priority    = "$task.RELATIVE_PRIORITY.value";
    vs_Schedule         = "$task.SCHEDULE.value";
    vs_Task_Type        = "$task.taskType";
    vs_Events_WaitingFor= "(OS_TCB[$num].EventsSet)";
    vs_Events_Set       = "(OS_TCB[$num].EventsWaitingFor)";
};

STACK ${task.name}_Stack {
    SIZE                = "(OS_TaskConf[$num].StackSize)";
    STACKDIRECTION      = "${info.stack.direction}";
    BASEADDRESS         = "&(${task.name}_Stack[0])";
    FILLPATTERN         = "${info.stack.fillpattern}";
};

CONTEXT CONTEXT_$task.name {
#for $name,$type_,$offs in $info.context
    _CPU_$name = "(($type_ *)(OS_TCB[$num].Stackpointer))[$offs]";
#end for
    VALID = "((OS_TCB[$num].State!=SUSPENDED) && (OS_TCB[$num].State!=RUNNING))";
};

#*
typedef struct tagOsTCBType {
    uint8 *Stackpointer; /* todo: 'StackPointerType! */
    TaskStateType State;
    uint8 Activations;
    EventMaskType EventsSet,EventsWaitingFor;
    uint8 ResourceCount;
    PriorityType CurrentPriority;
} OsTCBType;

typedef struct tagOsTaskConfigurationType {
    TaskFunctionType TaskFunction;
    uint8 *StackStart;
    uint8 StackSize;
    PriorityType Priority;
    uint8 Flags;
    uint8 MaxActivations;
    AppModeType Autostart;
    ResourceType InternalResource;
} OsTaskConfigurationType;
*#
#end for

#for $num,$alarm in $enumerate($app.alarms,1)   ## check: eigentlich '0'???
ALARM ${alarm.name} {
    ALARMTIME = "OS_AlarmValue[$num].ExpireCounter";
    CYCLETIME = "OS_AlarmValue[$num].CycleCounter";
    STATE     = "((OsAlm_ActiveAlarms & (1 << $num))!=0) ? 1 : 0";  ## todo: 'bitSet' statt 1<<$num!!!
    ACTION    = "$alarmAction($alarm)";
    COUNTER   = "$alarm.COUNTER.value";
};

#end for
#for $num,$res in $enumerate($app.standardResources,0)
RESOURCE ${res.name} {
    PRIORITY = "TASK: ${res.relativeCeilingPriority}";
    LOCKER   = "&Os_Resources[$num].Locker";
    STATE    = "&Os_Resources[$num].Locker != INVALID_TASK";
};

#end for
#def alarmAction($alarm)
#if $alarm.ACTION.value=='ACTIVATETASK'
#set $action='ActivateTask: '
#elif $alarm.ACTION.value=='SETEVENT'
#set $action='SetEvent: '
#elif $alarm.ACTION.value=='ALARMCALLBACK'
#set $action='AlarmCallback: '
#end if
$action#slurp
#end def